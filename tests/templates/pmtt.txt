
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "pmtt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0121) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : PMTT
0000000B 00000185 00000021 00000030 00000000 00                        Table Length : 000000B4
0000000C 000001BE 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001F1 00000025 00000030 00000000 00                            Checksum : 3A
0000000E 00000224 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 0000025D 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000298 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002D1 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000308 00000018 00000030 00000000 00               Asl Compiler Revision : 20110826
00000014 00000343 00000025 00000030 00000000 00                            Reserved : 00000000
00000016 0000037E 00000020 00000030 00000000 00                       Subtable Type : 00
00000017 000003BA 00000025 00000030 00000000 00                            Reserved : 00
00000018 000003ED 00000027 00000030 00000000 00                              Length : 0080
00000019 00000422 00000018 00000030 00000000 00               Flags (decoded below) : 0001
0000001A 00000457 0000001D 00000030 00000000 00                    Top-level Device : 1
0000001B 00000489 0000001D 00000030 00000000 00                    Physical Element : 0
0000001C 000004BB 00000022 00000030 00000000 00                         Memory Type : 0
0000001D 000004ED 00000025 00000030 00000000 00                            Reserved : 0000
0000001E 00000522 00000024 00000030 00000000 00                           Socket ID : 0000
0000001F 00000557 00000025 00000030 00000000 00                            Reserved : 0000
00000021 0000058E 00000020 00000030 00000000 00                       Subtable Type : 01
00000022 000005D5 00000025 00000030 00000000 00                            Reserved : 00
00000023 00000608 00000027 00000030 00000000 00                              Length : 0054
00000024 0000063D 00000018 00000030 00000000 00               Flags (decoded below) : 0005
00000025 00000672 0000001D 00000030 00000000 00                    Top-level Device : 1
00000026 000006A4 0000001D 00000030 00000000 00                    Physical Element : 0
00000027 000006D6 00000022 00000030 00000000 00                         Memory Type : 1
00000028 00000708 00000025 00000030 00000000 00                            Reserved : 0000
00000029 0000073D 00000021 00000030 00000000 00                        Read Latency : 00000000
0000002A 00000776 00000020 00000030 00000000 00                       Write Latency : 00000000
0000002B 000007AF 0000001F 00000030 00000000 00                      Read Bandwidth : 00000000
0000002C 000007E8 0000001E 00000030 00000000 00                     Write Bandwidth : 00000000
0000002D 00000821 00000021 00000030 00000000 00                        Access Width : 0000
0000002E 00000856 00000024 00000030 00000000 00                           Alignment : 0000
0000002F 0000088B 00000025 00000030 00000000 00                            Reserved : 0000
00000030 000008C0 00000021 00000030 00000000 00                        Domain Count : 0003
00000031 000008F5 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000032 0000092E 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000033 00000967 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000035 000009A2 00000020 00000030 00000000 00                       Subtable Type : 02
00000036 000009F1 00000025 00000030 00000000 00                            Reserved : 00
00000037 00000A24 00000027 00000030 00000000 00                              Length : 0014
00000038 00000A59 00000018 00000030 00000000 00               Flags (decoded below) : 0002
00000039 00000A8E 0000001D 00000030 00000000 00                    Top-level Device : 0
0000003A 00000AC0 0000001D 00000030 00000000 00                    Physical Element : 1
0000003B 00000AF2 00000022 00000030 00000000 00                         Memory Type : 0
0000003C 00000B24 00000025 00000030 00000000 00                            Reserved : 0000
0000003D 00000B59 00000021 00000030 00000000 00                        Component ID : 0000
0000003E 00000B8E 00000025 00000030 00000000 00                            Reserved : 0000
0000003F 00000BC3 00000022 00000030 00000000 00                         Memory Size : 00000000
00000040 00000BFC 00000022 00000030 00000000 00                         Bios Handle : 00000000
00000042 00000C37 00000020 00000030 00000000 00                       Subtable Type : 02
00000043 00000C86 00000025 00000030 00000000 00                            Reserved : 00
00000044 00000CB9 00000027 00000030 00000000 00                              Length : 0014
00000045 00000CEE 00000018 00000030 00000000 00               Flags (decoded below) : 0002
00000046 00000D23 0000001D 00000030 00000000 00                    Top-level Device : 0
00000047 00000D55 0000001D 00000030 00000000 00                    Physical Element : 1
00000048 00000D87 00000022 00000030 00000000 00                         Memory Type : 0
00000049 00000DB9 00000025 00000030 00000000 00                            Reserved : 0000
0000004A 00000DEE 00000021 00000030 00000000 00                        Component ID : 0000
0000004B 00000E23 00000025 00000030 00000000 00                            Reserved : 0000
0000004C 00000E58 00000022 00000030 00000000 00                         Memory Size : 00000000
0000004D 00000E91 00000022 00000030 00000000 00                         Bios Handle : 00000000
0000004F 00000ECC 00000020 00000030 00000000 00                       Subtable Type : 01
00000050 00000F13 00000025 00000030 00000000 00                            Reserved : 00
00000051 00000F46 00000027 00000030 00000000 00                              Length : 0020
00000052 00000F7B 00000018 00000030 00000000 00               Flags (decoded below) : 0001
00000053 00000FB0 0000001D 00000030 00000000 00                    Top-level Device : 1
00000054 00000FE2 0000001D 00000030 00000000 00                    Physical Element : 0
00000055 00001014 00000022 00000030 00000000 00                         Memory Type : 0
00000056 00001046 00000025 00000030 00000000 00                            Reserved : 0000
00000057 0000107B 00000021 00000030 00000000 00                        Read Latency : 00000000
00000058 000010B4 00000020 00000030 00000000 00                       Write Latency : 00000000
00000059 000010ED 0000001F 00000030 00000000 00                      Read Bandwidth : 00000000
0000005A 00001126 0000001E 00000030 00000000 00                     Write Bandwidth : 00000000
0000005B 0000115F 00000021 00000030 00000000 00                        Access Width : 0000
0000005C 00001194 00000024 00000030 00000000 00                           Alignment : 0000
0000005D 000011C9 00000025 00000030 00000000 00                            Reserved : 0000
0000005E 000011FE 00000021 00000030 00000000 00                        Domain Count : 0000
00000060 00001235 00000020 00000030 00000000 00                       Subtable Type : 00
00000061 00001271 00000025 00000030 00000000 00                            Reserved : 00
00000062 000012A4 00000027 00000030 00000000 00                              Length : 000C
00000063 000012D9 00000018 00000030 00000000 00               Flags (decoded below) : 0001
00000064 0000130E 0000001D 00000030 00000000 00                    Top-level Device : 1
00000065 00001340 0000001D 00000030 00000000 00                    Physical Element : 0
00000066 00001372 00000022 00000030 00000000 00                         Memory Type : 0
00000067 000013A4 00000025 00000030 00000000 00                            Reserved : 0000
00000068 000013D9 00000024 00000030 00000000 00                           Socket ID : 0000
00000069 0000140E 00000025 00000030 00000000 00                            Reserved : 0000


Full Integer expression: 000000B4
**** Input expression: 000000B4  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 180 (00000000000000B4)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 3A
**** Input expression: 3A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 58 (000000000000003A)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0080
**** Input expression: 0080  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 128 (0000000000000080)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0054
**** Input expression: 0054  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 84 (0000000000000054)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0014
**** Input expression: 0014  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 20 (0000000000000014)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0014
**** Input expression: 0014  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 20 (0000000000000014)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0020
**** Input expression: 0020  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000C
**** Input expression: 000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00001CD1 00                           Signature : PMTT
0000000B 00000185 00000021 00000030 00001CD5 00                        Table Length : 000000B4
0000000C 000001BE 00000025 00000030 00001CD9 00                            Revision : 01
0000000D 000001F1 00000025 00000030 00001CDA 00                            Checksum : 3A
0000000E 00000224 00000027 00000030 00001CDB 00                              Oem ID : INTEL 
0000000F 0000025D 00000021 00000030 00001CE1 00                        Oem Table ID : TEMPLATE
00000010 00000298 00000021 00000030 00001CE9 00                        Oem Revision : 00000001
00000011 000002D1 0000001E 00000030 00001CED 01                     Asl Compiler ID : INTL
00000012 00000308 00000018 00000030 00001CF1 01               Asl Compiler Revision : 20190703
00000014 00000343 00000025 00000030 00001CF5 00                            Reserved : 00000000
00000016 0000037E 00000020 00000030 00001CF9 00                       Subtable Type : 00
00000017 000003BA 00000025 00000030 00001CFA 00                            Reserved : 00
00000018 000003ED 00000027 00000030 00001CFB 00                              Length : 0080
00000019 00000422 00000018 00000030 00001CFD 00               Flags (decoded below) : 0001
0000001A 00000457 0000001D 00000030 00001CFF 00                    Top-level Device : 1
0000001B 00000489 0000001D 00000030 00001CFF 00                    Physical Element : 0
0000001C 000004BB 00000022 00000030 00001CFF 00                         Memory Type : 0
0000001D 000004ED 00000025 00000030 00001CFF 00                            Reserved : 0000
0000001E 00000522 00000024 00000030 00001D01 00                           Socket ID : 0000
0000001F 00000557 00000025 00000030 00001D03 00                            Reserved : 0000
00000021 0000058E 00000020 00000030 00001D05 00                       Subtable Type : 01
00000022 000005D5 00000025 00000030 00001D06 00                            Reserved : 00
00000023 00000608 00000027 00000030 00001D07 00                              Length : 0054
00000024 0000063D 00000018 00000030 00001D09 00               Flags (decoded below) : 0005
00000025 00000672 0000001D 00000030 00001D0B 00                    Top-level Device : 1
00000026 000006A4 0000001D 00000030 00001D0B 00                    Physical Element : 0
00000027 000006D6 00000022 00000030 00001D0B 00                         Memory Type : 1
00000028 00000708 00000025 00000030 00001D0B 00                            Reserved : 0000
00000029 0000073D 00000021 00000030 00001D0D 00                        Read Latency : 00000000
0000002A 00000776 00000020 00000030 00001D11 00                       Write Latency : 00000000
0000002B 000007AF 0000001F 00000030 00001D15 00                      Read Bandwidth : 00000000
0000002C 000007E8 0000001E 00000030 00001D19 00                     Write Bandwidth : 00000000
0000002D 00000821 00000021 00000030 00001D1D 00                        Access Width : 0000
0000002E 00000856 00000024 00000030 00001D1F 00                           Alignment : 0000
0000002F 0000088B 00000025 00000030 00001D21 00                            Reserved : 0000
00000030 000008C0 00000021 00000030 00001D23 00                        Domain Count : 0003
00000031 000008F5 0000001D 00000030 00001D25 00                    Proximity Domain : 00000000
00000032 0000092E 0000001D 00000030 00001D29 00                    Proximity Domain : 00000000
00000033 00000967 0000001D 00000030 00001D2D 00                    Proximity Domain : 00000000
00000035 000009A2 00000020 00000030 00001D31 00                       Subtable Type : 02
00000036 000009F1 00000025 00000030 00001D32 00                            Reserved : 00
00000037 00000A24 00000027 00000030 00001D33 00                              Length : 0014
00000038 00000A59 00000018 00000030 00001D35 00               Flags (decoded below) : 0002
00000039 00000A8E 0000001D 00000030 00001D37 00                    Top-level Device : 0
0000003A 00000AC0 0000001D 00000030 00001D37 00                    Physical Element : 1
0000003B 00000AF2 00000022 00000030 00001D37 00                         Memory Type : 0
0000003C 00000B24 00000025 00000030 00001D37 00                            Reserved : 0000
0000003D 00000B59 00000021 00000030 00001D39 00                        Component ID : 0000
0000003E 00000B8E 00000025 00000030 00001D3B 00                            Reserved : 0000
0000003F 00000BC3 00000022 00000030 00001D3D 00                         Memory Size : 00000000
00000040 00000BFC 00000022 00000030 00001D41 00                         Bios Handle : 00000000
00000042 00000C37 00000020 00000030 00001D45 00                       Subtable Type : 02
00000043 00000C86 00000025 00000030 00001D46 00                            Reserved : 00
00000044 00000CB9 00000027 00000030 00001D47 00                              Length : 0014
00000045 00000CEE 00000018 00000030 00001D49 00               Flags (decoded below) : 0002
00000046 00000D23 0000001D 00000030 00001D4B 00                    Top-level Device : 0
00000047 00000D55 0000001D 00000030 00001D4B 00                    Physical Element : 1
00000048 00000D87 00000022 00000030 00001D4B 00                         Memory Type : 0
00000049 00000DB9 00000025 00000030 00001D4B 00                            Reserved : 0000
0000004A 00000DEE 00000021 00000030 00001D4D 00                        Component ID : 0000
0000004B 00000E23 00000025 00000030 00001D4F 00                            Reserved : 0000
0000004C 00000E58 00000022 00000030 00001D51 00                         Memory Size : 00000000
0000004D 00000E91 00000022 00000030 00001D55 00                         Bios Handle : 00000000
0000004F 00000ECC 00000020 00000030 00001D59 00                       Subtable Type : 01
00000050 00000F13 00000025 00000030 00001D5A 00                            Reserved : 00
00000051 00000F46 00000027 00000030 00001D5B 00                              Length : 0020
00000052 00000F7B 00000018 00000030 00001D5D 00               Flags (decoded below) : 0001
00000053 00000FB0 0000001D 00000030 00001D5F 00                    Top-level Device : 1
00000054 00000FE2 0000001D 00000030 00001D5F 00                    Physical Element : 0
00000055 00001014 00000022 00000030 00001D5F 00                         Memory Type : 0
00000056 00001046 00000025 00000030 00001D5F 00                            Reserved : 0000
00000057 0000107B 00000021 00000030 00001D61 00                        Read Latency : 00000000
00000058 000010B4 00000020 00000030 00001D65 00                       Write Latency : 00000000
00000059 000010ED 0000001F 00000030 00001D69 00                      Read Bandwidth : 00000000
0000005A 00001126 0000001E 00000030 00001D6D 00                     Write Bandwidth : 00000000
0000005B 0000115F 00000021 00000030 00001D71 00                        Access Width : 0000
0000005C 00001194 00000024 00000030 00001D73 00                           Alignment : 0000
0000005D 000011C9 00000025 00000030 00001D75 00                            Reserved : 0000
0000005E 000011FE 00000021 00000030 00001D77 00                        Domain Count : 0000
00000060 00001235 00000020 00000030 00001D79 00                       Subtable Type : 00
00000061 00001271 00000025 00000030 00001D7A 00                            Reserved : 00
00000062 000012A4 00000027 00000030 00001D7B 00                              Length : 000C
00000063 000012D9 00000018 00000030 00001D7D 00               Flags (decoded below) : 0001
00000064 0000130E 0000001D 00000030 00001D7F 00                    Top-level Device : 1
00000065 00001340 0000001D 00000030 00001D7F 00                    Physical Element : 0
00000066 00001372 00000022 00000030 00001D7F 00                         Memory Type : 0
00000067 000013A4 00000025 00000030 00001D7F 00                            Reserved : 0000
00000068 000013D9 00000024 00000030 00001D81 00                           Socket ID : 0000
00000069 0000140E 00000025 00000030 00001D83 00                            Reserved : 0000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 000000B4 00000004 00000000 03093E8C 00000000 03093EB8 00000000
[0001]                 Reserved 00000004 00000004 00000000 00000000 03093EB8 03093E8C 00000000 03093EE4
[0001]            Subtable Type 00000008 00000080 00000002 00000000 03093EE4 03093E8C 03093F10 03094120
[0002]                Socket ID 00000004 00000004 00000000 00000000 03093F10 03093EE4 00000000 03093F3C
[0002]            Subtable Type 00000008 00000054 00000002 00000000 03093F3C 03093EE4 03093F68 030940C8
[0003]             Read Latency 00000018 00000018 00000000 00000000 03093F68 03093F3C 00000000 03093F94
[0003]         Proximity Domain 00000004 00000004 00000000 00000000 03093F94 03093F3C 00000000 03093FC0
[0003]         Proximity Domain 00000004 00000004 00000000 00000000 03093FC0 03093F3C 00000000 03093FEC
[0003]         Proximity Domain 00000004 00000004 00000000 00000000 03093FEC 03093F3C 00000000 03094018
[0003]            Subtable Type 00000008 00000014 00000002 00000000 03094018 03093F3C 03094044 03094070
[0004]             Component ID 0000000C 0000000C 00000000 00000000 03094044 03094018 00000000 00000000
[0003]            Subtable Type 00000008 00000014 00000002 00000000 03094070 03093F3C 0309409C 00000000
[0004]             Component ID 0000000C 0000000C 00000000 00000000 0309409C 03094070 00000000 00000000
[0002]            Subtable Type 00000008 00000020 00000002 00000000 030940C8 03093EE4 030940F4 00000000
[0003]             Read Latency 00000018 00000018 00000000 00000000 030940F4 030940C8 00000000 00000000
[0001]            Subtable Type 00000008 0000000C 00000002 00000000 03094120 03093E8C 0309414C 00000000
[0002]                Socket ID 00000004 00000004 00000000 00000000 0309414C 03094120 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03093E8C (24) - (B4)
[0001]                 Reserved     03093EB8 (04) - (04)
[0001]            Subtable Type     03093EE4 (08) - (80)
[0002]                Socket ID         03093F10 (04) - (04)
[0002]            Subtable Type         03093F3C (08) - (54)
[0003]             Read Latency             03093F68 (18) - (18)
[0003]         Proximity Domain             03093F94 (04) - (04)
[0003]         Proximity Domain             03093FC0 (04) - (04)
[0003]         Proximity Domain             03093FEC (04) - (04)
[0003]            Subtable Type             03094018 (08) - (14)
[0004]             Component ID                 03094044 (0C) - (0C)
[0003]            Subtable Type             03094070 (08) - (14)
[0004]             Component ID                 0309409C (0C) - (0C)
[0002]            Subtable Type         030940C8 (08) - (20)
[0003]             Read Latency             030940F4 (18) - (18)
[0001]            Subtable Type     03094120 (08) - (0C)
[0002]                Socket ID         0309414C (04) - (04)

