
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "wddt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0052) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : WDDT
0000000B 00000181 00000021 00000030 00000000 00                        Table Length : 00000040
0000000C 000001BA 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001ED 00000025 00000030 00000000 00                            Checksum : 00
0000000E 00000220 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000259 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000294 00000021 00000030 00000000 00                        Oem Revision : 00000000
00000011 000002CD 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000304 00000018 00000030 00000000 00               Asl Compiler Revision : 20100528
00000014 0000033F 00000018 00000030 00000000 00               Specification Version : 0000
00000015 00000374 00000020 00000030 00000000 00                       Table Version : 0000
00000016 000003A9 00000020 00000030 00000000 00                       PCI Vendor ID : 0000
00000019 0000042C 00000025 00000030 00000000 00                            Space ID : 01
0000001A 0000046A 00000024 00000030 00000000 00                           Bit Width : FF
0000001B 0000049D 00000023 00000030 00000000 00                          Bit Offset : 00
0000001C 000004D0 00000019 00000030 00000000 00                Encoded Access Width : 00
0000001D 00000516 00000026 00000030 00000000 00                             Address : 0000000000000000
0000001F 00000559 00000024 00000030 00000000 00                           Max Count : 0000
00000020 0000058E 00000024 00000030 00000000 00                           Min Count : 0000
00000021 000005C3 00000027 00000030 00000000 00                              Period : 0000
00000022 000005F8 00000017 00000030 00000000 00              Status (decoded below) : 0000
00000023 0000062D 00000024 00000030 00000000 00                           Available : 0
00000024 0000065F 00000027 00000030 00000000 00                              Active : 0
00000025 00000691 00000026 00000030 00000000 00                             OS Owns : 0
00000026 000006C3 00000023 00000030 00000000 00                          User Reset : 0
00000027 000006F5 00000020 00000030 00000000 00                       Timeout Reset : 0
00000028 00000727 0000001D 00000030 00000000 00                    Power Fail Reset : 0
00000029 00000759 00000020 00000030 00000000 00                       Unknown Reset : 0
0000002A 0000078B 00000013 00000030 00000000 00          Capability (decoded below) : 0000
0000002B 000007C0 00000023 00000030 00000000 00                          Auto Reset : 0
0000002C 000007F2 00000020 00000030 00000000 00                       Timeout Alert : 0


Full Integer expression: 00000040
**** Input expression: 00000040  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 64 (0000000000000040)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: FF
**** Input expression: FF  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 255 (00000000000000FF)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 000024DA 00                           Signature : WDDT
0000000B 00000181 00000021 00000030 000024DE 00                        Table Length : 00000040
0000000C 000001BA 00000025 00000030 000024E2 00                            Revision : 01
0000000D 000001ED 00000025 00000030 000024E3 00                            Checksum : 00
0000000E 00000220 00000027 00000030 000024E4 00                              Oem ID : INTEL 
0000000F 00000259 00000021 00000030 000024EA 00                        Oem Table ID : TEMPLATE
00000010 00000294 00000021 00000030 000024F2 00                        Oem Revision : 00000000
00000011 000002CD 0000001E 00000030 000024F6 01                     Asl Compiler ID : INTL
00000012 00000304 00000018 00000030 000024FA 01               Asl Compiler Revision : 20190703
00000014 0000033F 00000018 00000030 000024FE 00               Specification Version : 0000
00000015 00000374 00000020 00000030 00002500 00                       Table Version : 0000
00000016 000003A9 00000020 00000030 00002502 00                       PCI Vendor ID : 0000
00000019 0000042C 00000025 00000030 00002510 00                            Space ID : 01
0000001A 0000046A 00000024 00000030 00002511 00                           Bit Width : FF
0000001B 0000049D 00000023 00000030 00002512 00                          Bit Offset : 00
0000001C 000004D0 00000019 00000030 00002513 00                Encoded Access Width : 00
0000001D 00000516 00000026 00000030 00002514 00                             Address : 0000000000000000
0000001F 00000559 00000024 00000030 0000251C 00                           Max Count : 0000
00000020 0000058E 00000024 00000030 0000251E 00                           Min Count : 0000
00000021 000005C3 00000027 00000030 00002520 00                              Period : 0000
00000022 000005F8 00000017 00000030 00002522 00              Status (decoded below) : 0000
00000023 0000062D 00000024 00000030 00002524 00                           Available : 0
00000024 0000065F 00000027 00000030 00002524 00                              Active : 0
00000025 00000691 00000026 00000030 00002524 00                             OS Owns : 0
00000026 000006C3 00000023 00000030 00002524 00                          User Reset : 0
00000027 000006F5 00000020 00000030 00002524 00                       Timeout Reset : 0
00000028 00000727 0000001D 00000030 00002524 00                    Power Fail Reset : 0
00000029 00000759 00000020 00000030 00002524 00                       Unknown Reset : 0
0000002A 0000078B 00000013 00000030 00002524 00          Capability (decoded below) : 0000
0000002B 000007C0 00000023 00000030 00002526 00                          Auto Reset : 0
0000002C 000007F2 00000020 00000030 00002526 00                       Timeout Alert : 0


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000040 00000004 00000000 030C70F8 00000000 030C7124 00000000
[0001]    Specification Version 0000001C 0000001C 00000000 00000000 030C7124 030C70F8 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030C70F8 (24) - (40)
[0001]    Specification Version     030C7124 (1C) - (1C)

