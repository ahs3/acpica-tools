
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "srat.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0100) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : SRAT
0000000B 00000185 00000021 00000030 00000000 00                        Table Length : 000000BE
0000000C 000001BE 00000025 00000030 00000000 00                            Revision : 03
0000000D 000001F1 00000025 00000030 00000000 00                            Checksum : E6
0000000E 00000224 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 0000025D 00000021 00000030 00000000 00                        Oem Table ID : Template
00000010 00000298 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002D1 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000308 00000018 00000030 00000000 00               Asl Compiler Revision : 20180629
00000014 00000343 0000001F 00000030 00000000 00                      Table Revision : 00000001
00000015 0000037C 00000025 00000030 00000000 00                            Reserved : 0000000000000000
00000017 000003BF 00000020 00000030 00000000 00                       Subtable Type : 00
00000018 00000418 00000027 00000030 00000000 00                              Length : 10
0000001A 0000044D 00000016 00000030 00000000 00             Proximity Domain Low(8) : 00
0000001B 00000480 00000026 00000030 00000000 00                             Apic ID : 00
0000001C 000004B3 00000018 00000030 00000000 00               Flags (decoded below) : 00000001
0000001D 000004EC 00000026 00000030 00000000 00                             Enabled : 1
0000001E 0000051E 0000001E 00000030 00000000 00                     Local Sapic EID : 00
0000001F 00000551 00000014 00000030 00000000 00           Proximity Domain High(24) : 000000
00000020 00000588 00000021 00000030 00000000 00                        Clock Domain : 00000000
00000022 000005C3 00000020 00000030 00000000 00                       Subtable Type : 01
00000023 00000608 00000027 00000030 00000000 00                              Length : 28
00000025 0000063D 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000026 00000676 00000024 00000030 00000000 00                           Reserved1 : 0000
00000027 000006AB 00000021 00000030 00000000 00                        Base Address : 0000000000000000
00000028 000006EC 0000001F 00000030 00000000 00                      Address Length : 000000000009FC00
00000029 0000072D 00000024 00000030 00000000 00                           Reserved2 : 00000000
0000002A 00000766 00000018 00000030 00000000 00               Flags (decoded below) : 00000001
0000002B 0000079F 00000026 00000030 00000000 00                             Enabled : 1
0000002C 000007D1 00000020 00000030 00000000 00                       Hot Pluggable : 0
0000002D 00000803 00000021 00000030 00000000 00                        Non-Volatile : 0
0000002E 00000835 00000024 00000030 00000000 00                           Reserved3 : 0000000000000000
00000030 00000878 00000020 00000030 00000000 00                       Subtable Type : 02
00000031 000008CD 00000027 00000030 00000000 00                              Length : 18
00000033 00000902 00000024 00000030 00000000 00                           Reserved1 : 0000
00000034 00000937 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000035 00000970 00000026 00000030 00000000 00                             Apic ID : 00000000
00000036 000009A9 00000018 00000030 00000000 00               Flags (decoded below) : 00000001
00000037 000009E2 00000026 00000030 00000000 00                             Enabled : 1
00000038 00000A14 00000021 00000030 00000000 00                        Clock Domain : 00000000
00000039 00000A4D 00000024 00000030 00000000 00                           Reserved2 : 00000000
0000003B 00000A88 00000020 00000030 00000000 00                       Subtable Type : 03
0000003C 00000ACB 00000027 00000030 00000000 00                              Length : 12
0000003E 00000B00 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
0000003F 00000B39 0000001B 00000030 00000000 00                  Acpi Processor UID : 00000000
00000040 00000B72 00000018 00000030 00000000 00               Flags (decoded below) : 00000001
00000041 00000BAB 00000026 00000030 00000000 00                             Enabled : 1
00000042 00000BDD 00000021 00000030 00000000 00                        Clock Domain : 00000000
00000044 00000C18 00000020 00000030 00000000 00                       Subtable Type : 04
00000045 00000C5E 00000027 00000030 00000000 00                              Length : 0C
00000047 00000C93 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000048 00000CCC 00000025 00000030 00000000 00                            Reserved : 0000
00000049 00000D01 00000027 00000030 00000000 00                              ITS ID : 00000001
0000004B 00000D3C 00000020 00000030 00000000 00                       Subtable Type : 05
0000004C 00000D8C 00000027 00000030 00000000 00                              Length : 20
0000004E 00000DC1 00000024 00000030 00000000 00                           Reserved1 : 00
0000004F 00000DF4 0000001B 00000030 00000000 00                  Device Handle Type : 00
00000050 00000E27 0000001D 00000030 00000000 00                    Proximity Domain : 00000000
00000051 00000E60 00000020 00000030 00000000 00                       Device Handle : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00000052 00000EC0 00000018 00000030 00000000 00               Flags (decoded below) : 00000000
00000053 00000EF9 00000026 00000030 00000000 00                             Enabled : 0
00000054 00000F2B 00000024 00000030 00000000 00                           Reserved2 : 00000000


Full Integer expression: 000000BE
**** Input expression: 000000BE  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 190 (00000000000000BE)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: E6
**** Input expression: E6  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 230 (00000000000000E6)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 10
**** Input expression: 10  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 28
**** Input expression: 28  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 40 (0000000000000028)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000000009FC00
**** Input expression: 000000000009FC00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 654336 (000000000009FC00)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 18
**** Input expression: 18  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 12
**** Input expression: 12  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 18 (0000000000000012)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 04
**** Input expression: 04  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4 (0000000000000004)
Full Integer expression: 0C
**** Input expression: 0C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 05
**** Input expression: 05  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 5 (0000000000000005)
Full Integer expression: 20
**** Input expression: 20  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 000021B4 00                           Signature : SRAT
0000000B 00000185 00000021 00000030 000021B8 00                        Table Length : 000000BE
0000000C 000001BE 00000025 00000030 000021BC 00                            Revision : 03
0000000D 000001F1 00000025 00000030 000021BD 00                            Checksum : E6
0000000E 00000224 00000027 00000030 000021BE 00                              Oem ID : INTEL 
0000000F 0000025D 00000021 00000030 000021C4 00                        Oem Table ID : Template
00000010 00000298 00000021 00000030 000021CC 00                        Oem Revision : 00000001
00000011 000002D1 0000001E 00000030 000021D0 01                     Asl Compiler ID : INTL
00000012 00000308 00000018 00000030 000021D4 01               Asl Compiler Revision : 20190703
00000014 00000343 0000001F 00000030 000021D8 00                      Table Revision : 00000001
00000015 0000037C 00000025 00000030 000021DC 00                            Reserved : 0000000000000000
00000017 000003BF 00000020 00000030 000021E4 00                       Subtable Type : 00
00000018 00000418 00000027 00000030 000021E5 00                              Length : 10
0000001A 0000044D 00000016 00000030 000021E6 00             Proximity Domain Low(8) : 00
0000001B 00000480 00000026 00000030 000021E7 00                             Apic ID : 00
0000001C 000004B3 00000018 00000030 000021E8 00               Flags (decoded below) : 00000001
0000001D 000004EC 00000026 00000030 000021EC 00                             Enabled : 1
0000001E 0000051E 0000001E 00000030 000021EC 00                     Local Sapic EID : 00
0000001F 00000551 00000014 00000030 000021ED 00           Proximity Domain High(24) : 000000
00000020 00000588 00000021 00000030 000021F0 00                        Clock Domain : 00000000
00000022 000005C3 00000020 00000030 000021F4 00                       Subtable Type : 01
00000023 00000608 00000027 00000030 000021F5 00                              Length : 28
00000025 0000063D 0000001D 00000030 000021F6 00                    Proximity Domain : 00000000
00000026 00000676 00000024 00000030 000021FA 00                           Reserved1 : 0000
00000027 000006AB 00000021 00000030 000021FC 00                        Base Address : 0000000000000000
00000028 000006EC 0000001F 00000030 00002204 00                      Address Length : 000000000009FC00
00000029 0000072D 00000024 00000030 0000220C 00                           Reserved2 : 00000000
0000002A 00000766 00000018 00000030 00002210 00               Flags (decoded below) : 00000001
0000002B 0000079F 00000026 00000030 00002214 00                             Enabled : 1
0000002C 000007D1 00000020 00000030 00002214 00                       Hot Pluggable : 0
0000002D 00000803 00000021 00000030 00002214 00                        Non-Volatile : 0
0000002E 00000835 00000024 00000030 00002214 00                           Reserved3 : 0000000000000000
00000030 00000878 00000020 00000030 0000221C 00                       Subtable Type : 02
00000031 000008CD 00000027 00000030 0000221D 00                              Length : 18
00000033 00000902 00000024 00000030 0000221E 00                           Reserved1 : 0000
00000034 00000937 0000001D 00000030 00002220 00                    Proximity Domain : 00000000
00000035 00000970 00000026 00000030 00002224 00                             Apic ID : 00000000
00000036 000009A9 00000018 00000030 00002228 00               Flags (decoded below) : 00000001
00000037 000009E2 00000026 00000030 0000222C 00                             Enabled : 1
00000038 00000A14 00000021 00000030 0000222C 00                        Clock Domain : 00000000
00000039 00000A4D 00000024 00000030 00002230 00                           Reserved2 : 00000000
0000003B 00000A88 00000020 00000030 00002234 00                       Subtable Type : 03
0000003C 00000ACB 00000027 00000030 00002235 00                              Length : 12
0000003E 00000B00 0000001D 00000030 00002236 00                    Proximity Domain : 00000000
0000003F 00000B39 0000001B 00000030 0000223A 00                  Acpi Processor UID : 00000000
00000040 00000B72 00000018 00000030 0000223E 00               Flags (decoded below) : 00000001
00000041 00000BAB 00000026 00000030 00002242 00                             Enabled : 1
00000042 00000BDD 00000021 00000030 00002242 00                        Clock Domain : 00000000
00000044 00000C18 00000020 00000030 00002246 00                       Subtable Type : 04
00000045 00000C5E 00000027 00000030 00002247 00                              Length : 0C
00000047 00000C93 0000001D 00000030 00002248 00                    Proximity Domain : 00000000
00000048 00000CCC 00000025 00000030 0000224C 00                            Reserved : 0000
00000049 00000D01 00000027 00000030 0000224E 00                              ITS ID : 00000001
0000004B 00000D3C 00000020 00000030 00002252 00                       Subtable Type : 05
0000004C 00000D8C 00000027 00000030 00002253 00                              Length : 20
0000004E 00000DC1 00000024 00000030 00002254 00                           Reserved1 : 00
0000004F 00000DF4 0000001B 00000030 00002255 00                  Device Handle Type : 00
00000050 00000E27 0000001D 00000030 00002256 00                    Proximity Domain : 00000000
00000051 00000E60 00000020 00000030 0000225A 00                       Device Handle : 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
00000052 00000EC0 00000018 00000030 0000226A 00               Flags (decoded below) : 00000000
00000053 00000EF9 00000026 00000030 0000226E 00                             Enabled : 0
00000054 00000F2B 00000024 00000030 0000226E 00                           Reserved2 : 00000000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 000000BE 00000004 00000000 03094D54 00000000 03094D80 00000000
[0001]           Table Revision 0000000C 0000000C 00000000 00000000 03094D80 03094D54 00000000 03094DAC
[0001]            Subtable Type 00000002 00000010 00000001 00000000 03094DAC 03094D54 03094DD8 03094E04
[0002]  Proximity Domain Low(8) 0000000E 0000000E 00000000 00000000 03094DD8 03094DAC 00000000 00000000
[0001]            Subtable Type 00000002 00000028 00000001 00000000 03094E04 03094D54 03094E30 03094E5C
[0002]         Proximity Domain 00000026 00000026 00000000 00000000 03094E30 03094E04 00000000 00000000
[0001]            Subtable Type 00000002 00000018 00000001 00000000 03094E5C 03094D54 03094E88 03094EB4
[0002]                Reserved1 00000016 00000016 00000000 00000000 03094E88 03094E5C 00000000 00000000
[0001]            Subtable Type 00000002 00000012 00000001 00000000 03094EB4 03094D54 03094EE0 03094F0C
[0002]         Proximity Domain 00000010 00000010 00000000 00000000 03094EE0 03094EB4 00000000 00000000
[0001]            Subtable Type 00000002 0000000C 00000001 00000000 03094F0C 03094D54 03094F38 03094F64
[0002]         Proximity Domain 0000000A 0000000A 00000000 00000000 03094F38 03094F0C 00000000 00000000
[0001]            Subtable Type 00000002 00000020 00000001 00000000 03094F64 03094D54 03094F90 00000000
[0002]                Reserved1 0000001E 0000001E 00000000 00000000 03094F90 03094F64 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03094D54 (24) - (BE)
[0001]           Table Revision     03094D80 (0C) - (0C)
[0001]            Subtable Type     03094DAC (02) - (10)
[0002]  Proximity Domain Low(8)         03094DD8 (0E) - (0E)
[0001]            Subtable Type     03094E04 (02) - (28)
[0002]         Proximity Domain         03094E30 (26) - (26)
[0001]            Subtable Type     03094E5C (02) - (18)
[0002]                Reserved1         03094E88 (16) - (16)
[0001]            Subtable Type     03094EB4 (02) - (12)
[0002]         Proximity Domain         03094EE0 (10) - (10)
[0001]            Subtable Type     03094F0C (02) - (0C)
[0002]         Proximity Domain         03094F38 (0A) - (0A)
[0001]            Subtable Type     03094F64 (02) - (20)
[0002]                Reserved1         03094F90 (1E) - (1E)

