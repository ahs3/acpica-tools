
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "xenv.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0031) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : XENV
0000000B 0000017C 00000021 00000030 00000000 00                        Table Length : 00000039
0000000C 000001B5 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001E8 00000025 00000030 00000000 00                            Checksum : 3A
0000000E 0000021B 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000254 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 0000028F 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002C8 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 000002FF 00000018 00000030 00000000 00               Asl Compiler Revision : 20150410
00000014 0000033A 0000001A 00000030 00000000 00                 Grant Table Address : 0A00000010000000
00000015 0000037B 0000001D 00000030 00000000 00                    Grant Table Size : 0B00000000002000
00000016 000003BC 0000001E 00000030 00000000 00                     Event Interrupt : AABB0025
00000017 000003F5 00000022 00000030 00000000 00                         Event Flags : 03


Full Integer expression: 00000039
**** Input expression: 00000039  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 57 (0000000000000039)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 3A
**** Input expression: 3A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 58 (000000000000003A)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0A00000010000000
**** Input expression: 0A00000010000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 268435456 (0A00000010000000)
Full Integer expression: 0B00000000002000
**** Input expression: 0B00000000002000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8192 (0B00000000002000)
Full Integer expression: AABB0025
**** Input expression: AABB0025  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2864381989 (00000000AABB0025)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00002645 00                           Signature : XENV
0000000B 0000017C 00000021 00000030 00002649 00                        Table Length : 00000039
0000000C 000001B5 00000025 00000030 0000264D 00                            Revision : 01
0000000D 000001E8 00000025 00000030 0000264E 00                            Checksum : 3A
0000000E 0000021B 00000027 00000030 0000264F 00                              Oem ID : INTEL 
0000000F 00000254 00000021 00000030 00002655 00                        Oem Table ID : TEMPLATE
00000010 0000028F 00000021 00000030 0000265D 00                        Oem Revision : 00000001
00000011 000002C8 0000001E 00000030 00002661 01                     Asl Compiler ID : INTL
00000012 000002FF 00000018 00000030 00002665 01               Asl Compiler Revision : 20190703
00000014 0000033A 0000001A 00000030 00002669 00                 Grant Table Address : 0A00000010000000
00000015 0000037B 0000001D 00000030 00002671 00                    Grant Table Size : 0B00000000002000
00000016 000003BC 0000001E 00000030 00002679 00                     Event Interrupt : AABB0025
00000017 000003F5 00000022 00000030 0000267D 00                         Event Flags : 03


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000039 00000004 00000000 030C7308 00000000 030C7334 00000000
[0001]      Grant Table Address 00000015 00000015 00000000 00000000 030C7334 030C7308 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030C7308 (24) - (39)
[0001]      Grant Table Address     030C7334 (15) - (15)

