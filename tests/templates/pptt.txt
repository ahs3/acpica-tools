
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "pptt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0076) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : PPTT
0000000B 0000018A 00000021 00000030 00000000 00                        Table Length : 00000072
0000000C 000001C3 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001F6 00000025 00000030 00000000 00                            Checksum : 86
0000000E 00000229 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000262 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 0000029D 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002D6 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 0000030D 00000018 00000030 00000000 00               Asl Compiler Revision : 20170303
00000015 0000034A 00000020 00000030 00000000 00                       Subtable Type : 00
00000016 00000398 00000027 00000030 00000000 00                              Length : 18
00000017 000003CB 00000025 00000030 00000000 00                            Reserved : 0000
00000018 00000400 00000018 00000030 00000000 00               Flags (decoded below) : 00000000
00000019 00000439 0000001D 00000030 00000000 00                    Physical package : 0
0000001A 0000046B 00000016 00000030 00000000 00             ACPI Processor ID valid : 0
0000001B 0000049D 00000018 00000030 00000000 00               Processor is a thread : 0
0000001C 000004CF 0000001F 00000030 00000000 00                      Node is a leaf : 0
0000001D 00000501 00000015 00000030 00000000 00            Identical Implementation : 0
0000001E 00000533 00000027 00000030 00000000 00                              Parent : 00000000
0000001F 0000056C 0000001C 00000030 00000000 00                   ACPI Processor ID : 00000000
00000020 000005A5 00000016 00000030 00000000 00             Private Resource Number : 00000001
00000021 000005DE 0000001D 00000030 00000000 00                    Private Resource : 00000000
00000023 00000619 00000020 00000030 00000000 00                       Subtable Type : 01
00000024 00000659 00000027 00000030 00000000 00                              Length : 18
00000025 0000068C 00000025 00000030 00000000 00                            Reserved : 0000
00000026 000006C1 00000018 00000030 00000000 00               Flags (decoded below) : 00000000
00000027 000006FA 00000023 00000030 00000000 00                          Size valid : 0
00000028 0000072C 00000019 00000030 00000000 00                Number of Sets valid : 0
00000029 0000075E 0000001A 00000030 00000000 00                 Associativity valid : 0
0000002A 00000790 00000018 00000030 00000000 00               Allocation Type valid : 0
0000002B 000007C2 0000001D 00000030 00000000 00                    Cache Type valid : 0
0000002C 000007F4 0000001B 00000030 00000000 00                  Write Policy valid : 0
0000002D 00000826 0000001E 00000030 00000000 00                     Line Size valid : 0
0000002E 00000858 0000001A 00000030 00000000 00                 Next Level of Cache : 00000000
0000002F 00000891 00000029 00000030 00000000 00                                Size : 00000000
00000030 000008CA 0000001F 00000030 00000000 00                      Number of Sets : 00000000
00000031 00000903 00000020 00000030 00000000 00                       Associativity : 00
00000032 00000936 00000023 00000030 00000000 00                          Attributes : 00
00000033 00000969 0000001E 00000030 00000000 00                     Allocation Type : 0
00000034 0000099B 00000023 00000030 00000000 00                          Cache Type : 0
00000035 000009CD 00000021 00000030 00000000 00                        Write Policy : 0
00000036 000009FF 00000024 00000030 00000000 00                           Line Size : 0000
00000038 00000A36 00000020 00000030 00000000 00                       Subtable Type : 02
00000039 00000A6E 00000027 00000030 00000000 00                              Length : 1E
0000003A 00000AA1 00000025 00000030 00000000 00                            Reserved : 0000
0000003B 00000AD6 00000024 00000030 00000000 00                           Vendor ID : 00000000
0000003C 00000B0F 00000024 00000030 00000000 00                           Level1 ID : 0000000000000000
0000003D 00000B50 00000024 00000030 00000000 00                           Level2 ID : 0000000000000000
0000003E 00000B91 0000001F 00000030 00000000 00                      Major revision : 0000
0000003F 00000BC6 0000001F 00000030 00000000 00                      Minor revision : 0000
00000040 00000BFB 00000020 00000030 00000000 00                       Spin revision : 0000


Full Integer expression: 00000072
**** Input expression: 00000072  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 114 (0000000000000072)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 86
**** Input expression: 86  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 134 (0000000000000086)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 18
**** Input expression: 18  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 18
**** Input expression: 18  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 1E
**** Input expression: 1E  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 30 (000000000000001E)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00001D85 00                           Signature : PPTT
0000000B 0000018A 00000021 00000030 00001D89 00                        Table Length : 00000072
0000000C 000001C3 00000025 00000030 00001D8D 00                            Revision : 01
0000000D 000001F6 00000025 00000030 00001D8E 00                            Checksum : 86
0000000E 00000229 00000027 00000030 00001D8F 00                              Oem ID : INTEL 
0000000F 00000262 00000021 00000030 00001D95 00                        Oem Table ID : TEMPLATE
00000010 0000029D 00000021 00000030 00001D9D 00                        Oem Revision : 00000001
00000011 000002D6 0000001E 00000030 00001DA1 01                     Asl Compiler ID : INTL
00000012 0000030D 00000018 00000030 00001DA5 01               Asl Compiler Revision : 20190703
00000015 0000034A 00000020 00000030 00001DA9 00                       Subtable Type : 00
00000016 00000398 00000027 00000030 00001DAA 00                              Length : 18
00000017 000003CB 00000025 00000030 00001DAB 00                            Reserved : 0000
00000018 00000400 00000018 00000030 00001DAD 00               Flags (decoded below) : 00000000
00000019 00000439 0000001D 00000030 00001DB1 00                    Physical package : 0
0000001A 0000046B 00000016 00000030 00001DB1 00             ACPI Processor ID valid : 0
0000001B 0000049D 00000018 00000030 00001DB1 00               Processor is a thread : 0
0000001C 000004CF 0000001F 00000030 00001DB1 00                      Node is a leaf : 0
0000001D 00000501 00000015 00000030 00001DB1 00            Identical Implementation : 0
0000001E 00000533 00000027 00000030 00001DB1 00                              Parent : 00000000
0000001F 0000056C 0000001C 00000030 00001DB5 00                   ACPI Processor ID : 00000000
00000020 000005A5 00000016 00000030 00001DB9 00             Private Resource Number : 00000001
00000021 000005DE 0000001D 00000030 00001DBD 00                    Private Resource : 00000000
00000023 00000619 00000020 00000030 00001DC1 00                       Subtable Type : 01
00000024 00000659 00000027 00000030 00001DC2 00                              Length : 18
00000025 0000068C 00000025 00000030 00001DC3 00                            Reserved : 0000
00000026 000006C1 00000018 00000030 00001DC5 00               Flags (decoded below) : 00000000
00000027 000006FA 00000023 00000030 00001DC9 00                          Size valid : 0
00000028 0000072C 00000019 00000030 00001DC9 00                Number of Sets valid : 0
00000029 0000075E 0000001A 00000030 00001DC9 00                 Associativity valid : 0
0000002A 00000790 00000018 00000030 00001DC9 00               Allocation Type valid : 0
0000002B 000007C2 0000001D 00000030 00001DC9 00                    Cache Type valid : 0
0000002C 000007F4 0000001B 00000030 00001DC9 00                  Write Policy valid : 0
0000002D 00000826 0000001E 00000030 00001DC9 00                     Line Size valid : 0
0000002E 00000858 0000001A 00000030 00001DC9 00                 Next Level of Cache : 00000000
0000002F 00000891 00000029 00000030 00001DCD 00                                Size : 00000000
00000030 000008CA 0000001F 00000030 00001DD1 00                      Number of Sets : 00000000
00000031 00000903 00000020 00000030 00001DD5 00                       Associativity : 00
00000032 00000936 00000023 00000030 00001DD6 00                          Attributes : 00
00000033 00000969 0000001E 00000030 00001DD7 00                     Allocation Type : 0
00000034 0000099B 00000023 00000030 00001DD7 00                          Cache Type : 0
00000035 000009CD 00000021 00000030 00001DD7 00                        Write Policy : 0
00000036 000009FF 00000024 00000030 00001DD7 00                           Line Size : 0000
00000038 00000A36 00000020 00000030 00001DD9 00                       Subtable Type : 02
00000039 00000A6E 00000027 00000030 00001DDA 00                              Length : 1E
0000003A 00000AA1 00000025 00000030 00001DDB 00                            Reserved : 0000
0000003B 00000AD6 00000024 00000030 00001DDD 00                           Vendor ID : 00000000
0000003C 00000B0F 00000024 00000030 00001DE1 00                           Level1 ID : 0000000000000000
0000003D 00000B50 00000024 00000030 00001DE9 00                           Level2 ID : 0000000000000000
0000003E 00000B91 0000001F 00000030 00001DF1 00                      Major revision : 0000
0000003F 00000BC6 0000001F 00000030 00001DF3 00                      Minor revision : 0000
00000040 00000BFB 00000020 00000030 00001DF5 00                       Spin revision : 0000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000072 00000004 00000000 03094178 00000000 030941A4 00000000
[0001]            Subtable Type 00000002 00000002 00000000 00000000 030941A4 03094178 00000000 030941D0
[0001]                 Reserved 00000012 00000012 00000000 00000000 030941D0 03094178 00000000 030941FC
[0001]         Private Resource 00000004 00000004 00000000 00000000 030941FC 03094178 00000000 03094228
[0001]            Subtable Type 00000002 00000002 00000000 00000000 03094228 03094178 00000000 03094254
[0001]                 Reserved 00000016 00000016 00000000 00000000 03094254 03094178 00000000 03094280
[0001]            Subtable Type 00000002 00000002 00000000 00000000 03094280 03094178 00000000 030942AC
[0001]                 Reserved 0000001C 0000001C 00000000 00000000 030942AC 03094178 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03094178 (24) - (72)
[0001]            Subtable Type     030941A4 (02) - (02)
[0001]                 Reserved     030941D0 (12) - (12)
[0001]         Private Resource     030941FC (04) - (04)
[0001]            Subtable Type     03094228 (02) - (02)
[0001]                 Reserved     03094254 (16) - (16)
[0001]            Subtable Type     03094280 (02) - (02)
[0001]                 Reserved     030942AC (1C) - (1C)

