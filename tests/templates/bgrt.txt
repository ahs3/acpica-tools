
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "bgrt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0035) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : BGRT
0000000B 00000183 00000021 00000030 00000000 00                        Table Length : 00000038
0000000C 000001BC 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001EF 00000025 00000030 00000000 00                            Checksum : 0D
0000000E 00000222 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 0000025B 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000296 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002CF 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000306 00000018 00000030 00000000 00               Asl Compiler Revision : 20110623
00000014 00000341 00000026 00000030 00000000 00                             Version : 0001
00000015 00000376 00000017 00000030 00000000 00              Status (decoded below) : 00
00000016 000003A9 00000024 00000030 00000000 00                           Displayed : 0
00000017 000003DB 0000001B 00000030 00000000 00                  Orientation Offset : 0
00000018 0000040D 00000023 00000030 00000000 00                          Image Type : 00
00000019 00000440 00000020 00000030 00000000 00                       Image Address : 0000000000000000
0000001A 00000481 00000020 00000030 00000000 00                       Image OffsetX : 00000000
0000001B 000004BA 00000020 00000030 00000000 00                       Image OffsetY : 00000000


Full Integer expression: 00000038
**** Input expression: 00000038  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 56 (0000000000000038)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0D
**** Input expression: 0D  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 13 (000000000000000D)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 000001FC 00                           Signature : BGRT
0000000B 00000183 00000021 00000030 00000200 00                        Table Length : 00000038
0000000C 000001BC 00000025 00000030 00000204 00                            Revision : 01
0000000D 000001EF 00000025 00000030 00000205 00                            Checksum : 0D
0000000E 00000222 00000027 00000030 00000206 00                              Oem ID : INTEL 
0000000F 0000025B 00000021 00000030 0000020C 00                        Oem Table ID : TEMPLATE
00000010 00000296 00000021 00000030 00000214 00                        Oem Revision : 00000001
00000011 000002CF 0000001E 00000030 00000218 01                     Asl Compiler ID : INTL
00000012 00000306 00000018 00000030 0000021C 01               Asl Compiler Revision : 20190703
00000014 00000341 00000026 00000030 00000220 00                             Version : 0001
00000015 00000376 00000017 00000030 00000222 00              Status (decoded below) : 00
00000016 000003A9 00000024 00000030 00000223 00                           Displayed : 0
00000017 000003DB 0000001B 00000030 00000223 00                  Orientation Offset : 0
00000018 0000040D 00000023 00000030 00000223 00                          Image Type : 00
00000019 00000440 00000020 00000030 00000224 00                       Image Address : 0000000000000000
0000001A 00000481 00000020 00000030 0000022C 00                       Image OffsetX : 00000000
0000001B 000004BA 00000020 00000030 00000230 00                       Image OffsetY : 00000000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000038 00000004 00000000 030177A4 00000000 030177D0 00000000
[0001]                  Version 00000014 00000014 00000000 00000000 030177D0 030177A4 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030177A4 (24) - (38)
[0001]                  Version     030177D0 (14) - (14)

