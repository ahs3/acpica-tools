
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "mpst.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0103) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : MPST
0000000B 0000017F 00000021 00000030 00000000 00                        Table Length : 000000B6
0000000C 000001B8 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001EB 00000025 00000030 00000000 00                            Checksum : 77
0000000E 0000021E 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000257 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000292 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002CB 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000302 00000018 00000030 00000000 00               Asl Compiler Revision : 20120913
00000014 0000033D 00000023 00000030 00000000 00                          Channel ID : 00
00000015 00000370 00000025 00000030 00000000 00                            Reserved : 000000
00000016 000003A7 0000001D 00000030 00000000 00                    Power Node Count : 0002
00000017 000003DC 00000025 00000030 00000000 00                            Reserved : 0000
00000019 00000413 00000018 00000030 00000000 00               Flags (decoded below) : 00
0000001A 00000446 00000021 00000030 00000000 00                        Node Enabled : 0
0000001B 00000478 00000020 00000030 00000000 00                       Power Managed : 0
0000001C 000004AA 0000001D 00000030 00000000 00                    Hot Plug Capable : 0
0000001D 000004DC 00000025 00000030 00000000 00                            Reserved : 00
0000001E 0000050F 00000026 00000030 00000000 00                             Node ID : 0000
0000001F 00000544 00000027 00000030 00000000 00                              Length : 00000000
00000020 0000057D 00000020 00000030 00000000 00                       Range Address : 0000000000000000
00000021 000005BE 00000021 00000030 00000000 00                        Range Length : 0000000000000000
00000022 000005FF 0000001D 00000030 00000000 00                    Num Power States : 00000002
00000023 00000638 00000016 00000030 00000000 00             Num Physical Components : 00000003
00000025 00000673 00000022 00000030 00000000 00                         Power State : 00
00000026 000006A6 00000024 00000030 00000000 00                           InfoIndex : 00
00000028 000006DB 00000022 00000030 00000000 00                         Power State : 00
00000029 0000070E 00000024 00000030 00000000 00                           InfoIndex : 00
0000002B 00000743 00000021 00000030 00000000 00                        Component Id : 0000
0000002C 00000778 00000021 00000030 00000000 00                        Component Id : 0001
0000002D 000007AD 00000021 00000030 00000000 00                        Component Id : 0002
0000002F 000007E4 00000018 00000030 00000000 00               Flags (decoded below) : 00
00000030 00000817 00000021 00000030 00000000 00                        Node Enabled : 0
00000031 00000849 00000020 00000030 00000000 00                       Power Managed : 0
00000032 0000087B 0000001D 00000030 00000000 00                    Hot Plug Capable : 0
00000033 000008AD 00000025 00000030 00000000 00                            Reserved : 00
00000034 000008E0 00000026 00000030 00000000 00                             Node ID : 0000
00000035 00000915 00000027 00000030 00000000 00                              Length : 00000000
00000036 0000094E 00000020 00000030 00000000 00                       Range Address : 0000000000000000
00000037 0000098F 00000021 00000030 00000000 00                        Range Length : 0000000000000000
00000038 000009D0 0000001D 00000030 00000000 00                    Num Power States : 00000001
00000039 00000A09 00000016 00000030 00000000 00             Num Physical Components : 00000001
0000003B 00000A44 00000022 00000030 00000000 00                         Power State : 00
0000003C 00000A77 00000024 00000030 00000000 00                           InfoIndex : 00
0000003E 00000AAC 00000021 00000030 00000000 00                        Component Id : 0000
00000040 00000AE3 00000018 00000030 00000000 00               Characteristics Count : 0002
00000041 00000B18 00000025 00000030 00000000 00                            Reserved : 0000
00000043 00000B4F 00000021 00000030 00000000 00                        Structure ID : 01
00000044 00000B82 00000018 00000030 00000000 00               Flags (decoded below) : 00
00000045 00000BB5 0000001D 00000030 00000000 00                    Memory Preserved : 0
00000046 00000BE7 00000023 00000030 00000000 00                          Auto Entry : 0
00000047 00000C19 00000024 00000030 00000000 00                           Auto Exit : 0
00000048 00000C4B 00000025 00000030 00000000 00                            Reserved : 0000
00000049 00000C80 00000020 00000030 00000000 00                       Average Power : 00000000
0000004A 00000CB9 00000021 00000030 00000000 00                        Power Saving : 00000000
0000004B 00000CF2 00000021 00000030 00000000 00                        Exit Latency : 0000000000000000
0000004C 00000D33 00000025 00000030 00000000 00                            Reserved : 0000000000000000
0000004E 00000D76 00000021 00000030 00000000 00                        Structure ID : 01
0000004F 00000DA9 00000018 00000030 00000000 00               Flags (decoded below) : 00
00000050 00000DDC 0000001D 00000030 00000000 00                    Memory Preserved : 0
00000051 00000E0E 00000023 00000030 00000000 00                          Auto Entry : 0
00000052 00000E40 00000024 00000030 00000000 00                           Auto Exit : 0
00000053 00000E72 00000025 00000030 00000000 00                            Reserved : 0000
00000054 00000EA7 00000020 00000030 00000000 00                       Average Power : 00000000
00000055 00000EE0 00000021 00000030 00000000 00                        Power Saving : 00000000
00000056 00000F19 00000021 00000030 00000000 00                        Exit Latency : 0000000000000000
00000057 00000F5A 00000025 00000030 00000000 00                            Reserved : 0000000000000000


Full Integer expression: 000000B6
**** Input expression: 000000B6  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 182 (00000000000000B6)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 77
**** Input expression: 77  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 119 (0000000000000077)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0002
**** Input expression: 0002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000002
**** Input expression: 00000002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00000003
**** Input expression: 00000003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0002
**** Input expression: 0002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0002
**** Input expression: 0002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00001619 00                           Signature : MPST
0000000B 0000017F 00000021 00000030 0000161D 00                        Table Length : 000000B6
0000000C 000001B8 00000025 00000030 00001621 00                            Revision : 01
0000000D 000001EB 00000025 00000030 00001622 00                            Checksum : 77
0000000E 0000021E 00000027 00000030 00001623 00                              Oem ID : INTEL 
0000000F 00000257 00000021 00000030 00001629 00                        Oem Table ID : TEMPLATE
00000010 00000292 00000021 00000030 00001631 00                        Oem Revision : 00000001
00000011 000002CB 0000001E 00000030 00001635 01                     Asl Compiler ID : INTL
00000012 00000302 00000018 00000030 00001639 01               Asl Compiler Revision : 20190703
00000014 0000033D 00000023 00000030 0000163D 00                          Channel ID : 00
00000015 00000370 00000025 00000030 0000163E 00                            Reserved : 000000
00000016 000003A7 0000001D 00000030 00001641 00                    Power Node Count : 0002
00000017 000003DC 00000025 00000030 00001643 00                            Reserved : 0000
00000019 00000413 00000018 00000030 00001645 00               Flags (decoded below) : 00
0000001A 00000446 00000021 00000030 00001646 00                        Node Enabled : 0
0000001B 00000478 00000020 00000030 00001646 00                       Power Managed : 0
0000001C 000004AA 0000001D 00000030 00001646 00                    Hot Plug Capable : 0
0000001D 000004DC 00000025 00000030 00001646 00                            Reserved : 00
0000001E 0000050F 00000026 00000030 00001647 00                             Node ID : 0000
0000001F 00000544 00000027 00000030 00001649 00                              Length : 00000000
00000020 0000057D 00000020 00000030 0000164D 00                       Range Address : 0000000000000000
00000021 000005BE 00000021 00000030 00001655 00                        Range Length : 0000000000000000
00000022 000005FF 0000001D 00000030 0000165D 00                    Num Power States : 00000002
00000023 00000638 00000016 00000030 00001661 00             Num Physical Components : 00000003
00000025 00000673 00000022 00000030 00001665 00                         Power State : 00
00000026 000006A6 00000024 00000030 00001666 00                           InfoIndex : 00
00000028 000006DB 00000022 00000030 00001667 00                         Power State : 00
00000029 0000070E 00000024 00000030 00001668 00                           InfoIndex : 00
0000002B 00000743 00000021 00000030 00001669 00                        Component Id : 0000
0000002C 00000778 00000021 00000030 0000166B 00                        Component Id : 0001
0000002D 000007AD 00000021 00000030 0000166D 00                        Component Id : 0002
0000002F 000007E4 00000018 00000030 0000166F 00               Flags (decoded below) : 00
00000030 00000817 00000021 00000030 00001670 00                        Node Enabled : 0
00000031 00000849 00000020 00000030 00001670 00                       Power Managed : 0
00000032 0000087B 0000001D 00000030 00001670 00                    Hot Plug Capable : 0
00000033 000008AD 00000025 00000030 00001670 00                            Reserved : 00
00000034 000008E0 00000026 00000030 00001671 00                             Node ID : 0000
00000035 00000915 00000027 00000030 00001673 00                              Length : 00000000
00000036 0000094E 00000020 00000030 00001677 00                       Range Address : 0000000000000000
00000037 0000098F 00000021 00000030 0000167F 00                        Range Length : 0000000000000000
00000038 000009D0 0000001D 00000030 00001687 00                    Num Power States : 00000001
00000039 00000A09 00000016 00000030 0000168B 00             Num Physical Components : 00000001
0000003B 00000A44 00000022 00000030 0000168F 00                         Power State : 00
0000003C 00000A77 00000024 00000030 00001690 00                           InfoIndex : 00
0000003E 00000AAC 00000021 00000030 00001691 00                        Component Id : 0000
00000040 00000AE3 00000018 00000030 00001693 00               Characteristics Count : 0002
00000041 00000B18 00000025 00000030 00001695 00                            Reserved : 0000
00000043 00000B4F 00000021 00000030 00001697 00                        Structure ID : 01
00000044 00000B82 00000018 00000030 00001698 00               Flags (decoded below) : 00
00000045 00000BB5 0000001D 00000030 00001699 00                    Memory Preserved : 0
00000046 00000BE7 00000023 00000030 00001699 00                          Auto Entry : 0
00000047 00000C19 00000024 00000030 00001699 00                           Auto Exit : 0
00000048 00000C4B 00000025 00000030 00001699 00                            Reserved : 0000
00000049 00000C80 00000020 00000030 0000169B 00                       Average Power : 00000000
0000004A 00000CB9 00000021 00000030 0000169F 00                        Power Saving : 00000000
0000004B 00000CF2 00000021 00000030 000016A3 00                        Exit Latency : 0000000000000000
0000004C 00000D33 00000025 00000030 000016AB 00                            Reserved : 0000000000000000
0000004E 00000D76 00000021 00000030 000016B3 00                        Structure ID : 01
0000004F 00000DA9 00000018 00000030 000016B4 00               Flags (decoded below) : 00
00000050 00000DDC 0000001D 00000030 000016B5 00                    Memory Preserved : 0
00000051 00000E0E 00000023 00000030 000016B5 00                          Auto Entry : 0
00000052 00000E40 00000024 00000030 000016B5 00                           Auto Exit : 0
00000053 00000E72 00000025 00000030 000016B5 00                            Reserved : 0000
00000054 00000EA7 00000020 00000030 000016B7 00                       Average Power : 00000000
00000055 00000EE0 00000021 00000030 000016BB 00                        Power Saving : 00000000
00000056 00000F19 00000021 00000030 000016BF 00                        Exit Latency : 0000000000000000
00000057 00000F5A 00000025 00000030 000016C7 00                            Reserved : 0000000000000000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 000000B6 00000004 00000000 0306C3B0 00000000 0306C3DC 00000000
[0001]               Channel ID 00000008 00000056 00000000 00000000 0306C3DC 0306C3B0 0306C408 0306C594
[0002]    Flags (decoded below) 00000020 0000002A 00000000 00000000 0306C408 0306C3DC 0306C434 0306C510
[0003]              Power State 00000002 00000002 00000000 00000000 0306C434 0306C408 00000000 0306C460
[0003]              Power State 00000002 00000002 00000000 00000000 0306C460 0306C408 00000000 0306C48C
[0003]             Component Id 00000002 00000002 00000000 00000000 0306C48C 0306C408 00000000 0306C4B8
[0003]             Component Id 00000002 00000002 00000000 00000000 0306C4B8 0306C408 00000000 0306C4E4
[0003]             Component Id 00000002 00000002 00000000 00000000 0306C4E4 0306C408 00000000 00000000
[0002]    Flags (decoded below) 00000020 00000024 00000000 00000000 0306C510 0306C3DC 0306C53C 00000000
[0003]              Power State 00000002 00000002 00000000 00000000 0306C53C 0306C510 00000000 0306C568
[0003]             Component Id 00000002 00000002 00000000 00000000 0306C568 0306C510 00000000 00000000
[0001]    Characteristics Count 00000004 0000003C 00000000 00000000 0306C594 0306C3B0 0306C5C0 00000000
[0002]             Structure ID 0000001C 0000001C 00000000 00000000 0306C5C0 0306C594 00000000 0306C5EC
[0002]             Structure ID 0000001C 0000001C 00000000 00000000 0306C5EC 0306C594 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  0306C3B0 (24) - (B6)
[0001]               Channel ID     0306C3DC (08) - (56)
[0002]    Flags (decoded below)         0306C408 (20) - (2A)
[0003]              Power State             0306C434 (02) - (02)
[0003]              Power State             0306C460 (02) - (02)
[0003]             Component Id             0306C48C (02) - (02)
[0003]             Component Id             0306C4B8 (02) - (02)
[0003]             Component Id             0306C4E4 (02) - (02)
[0002]    Flags (decoded below)         0306C510 (20) - (24)
[0003]              Power State             0306C53C (02) - (02)
[0003]             Component Id             0306C568 (02) - (02)
[0001]    Characteristics Count     0306C594 (04) - (3C)
[0002]             Structure ID         0306C5C0 (1C) - (1C)
[0002]             Structure ID         0306C5EC (1C) - (1C)

