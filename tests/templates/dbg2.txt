
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "dbg2.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0095) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : DBG2
0000000B 0000017E 00000021 00000030 00000000 00                        Table Length : 000000B2
0000000C 000001B7 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001EA 00000025 00000030 00000000 00                            Checksum : BA
0000000E 0000021D 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000256 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000291 00000021 00000030 00000000 00                        Oem Revision : 00000000
00000011 000002CA 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000301 00000018 00000030 00000000 00               Asl Compiler Revision : 20131115
00000014 0000033C 00000022 00000030 00000000 00                         Info Offset : 0000002C
00000015 00000375 00000023 00000030 00000000 00                          Info Count : 00000002
00000017 000003B0 00000025 00000030 00000000 00                            Revision : EE
00000018 000003E3 00000027 00000030 00000000 00                              Length : 003F
00000019 00000418 0000001F 00000030 00000000 00                      Register Count : 02
0000001A 0000044B 0000001E 00000030 00000000 00                     Namepath Length : 0009
0000001B 00000480 0000001E 00000030 00000000 00                     Namepath Offset : 0036
0000001C 000004B5 0000001E 00000030 00000000 00                     OEM Data Length : 0000
0000001D 00000507 0000001E 00000030 00000000 00                     OEM Data Offset : 0000
0000001E 00000559 00000024 00000030 00000000 00                           Port Type : 8000
0000001F 0000058E 00000021 00000030 00000000 00                        Port Subtype : 0000
00000020 000005C3 00000025 00000030 00000000 00                            Reserved : 0000
00000021 000005F8 0000001A 00000030 00000000 00                 Base Address Offset : 0016
00000022 0000062D 0000001A 00000030 00000000 00                 Address Size Offset : 002E
00000025 000006B0 00000025 00000030 00000000 00                            Space ID : 01
00000026 000006EE 00000024 00000030 00000000 00                           Bit Width : 32
00000027 00000721 00000023 00000030 00000000 00                          Bit Offset : 00
00000028 00000754 00000019 00000030 00000000 00                Encoded Access Width : 03
00000029 00000799 00000026 00000030 00000000 00                             Address : 1122334455667788
0000002D 0000082A 00000025 00000030 00000000 00                            Space ID : 01
0000002E 00000868 00000024 00000030 00000000 00                           Bit Width : 64
0000002F 0000089B 00000023 00000030 00000000 00                          Bit Offset : 00
00000030 000008CE 00000019 00000030 00000000 00                Encoded Access Width : 04
00000031 00000913 00000026 00000030 00000000 00                             Address : AABBCCDDEEFF0011
00000033 00000956 00000021 00000030 00000000 00                        Address Size : 76543210
00000034 0000098F 00000021 00000030 00000000 00                        Address Size : FEDCBA98
00000036 000009CA 00000025 00000030 00000000 00                            Namepath : MyDevice
00000038 00000A07 00000025 00000030 00000000 00                            Revision : EE
00000039 00000A3A 00000027 00000030 00000000 00                              Length : 0047
0000003A 00000A6F 0000001F 00000030 00000000 00                      Register Count : 01
0000003B 00000AA2 0000001E 00000030 00000000 00                     Namepath Length : 0011
0000003C 00000AD7 0000001E 00000030 00000000 00                     Namepath Offset : 0026
0000003D 00000B0C 0000001E 00000030 00000000 00                     OEM Data Length : 0010
0000003E 00000B41 0000001E 00000030 00000000 00                     OEM Data Offset : 0037
0000003F 00000B76 00000024 00000030 00000000 00                           Port Type : 8000
00000040 00000BAB 00000021 00000030 00000000 00                        Port Subtype : 0000
00000041 00000BE0 00000025 00000030 00000000 00                            Reserved : 0000
00000042 00000C15 0000001A 00000030 00000000 00                 Base Address Offset : 0016
00000043 00000C4A 0000001A 00000030 00000000 00                 Address Size Offset : 0022
00000046 00000CCD 00000025 00000030 00000000 00                            Space ID : 01
00000047 00000D0B 00000024 00000030 00000000 00                           Bit Width : 64
00000048 00000D3E 00000023 00000030 00000000 00                          Bit Offset : 00
00000049 00000D71 00000019 00000030 00000000 00                Encoded Access Width : 04
0000004A 00000DB6 00000026 00000030 00000000 00                             Address : AABBCCDDEEFF0011
0000004C 00000DF9 00000021 00000030 00000000 00                        Address Size : FEDCBA98
0000004E 00000E34 00000025 00000030 00000000 00                            Namepath : \\_SB_.PCI0.DBGP
0000004F 00000E77 00000025 00000030 00000000 00                            OEM Data : 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56


Full Integer expression: 000000B2
**** Input expression: 000000B2  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 178 (00000000000000B2)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: BA
**** Input expression: BA  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 186 (00000000000000BA)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0000002C
**** Input expression: 0000002C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 44 (000000000000002C)
Full Integer expression: 00000002
**** Input expression: 00000002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: EE
**** Input expression: EE  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 238 (00000000000000EE)
Full Integer expression: 003F
**** Input expression: 003F  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 63 (000000000000003F)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0009
**** Input expression: 0009  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 9 (0000000000000009)
Full Integer expression: 0036
**** Input expression: 0036  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 54 (0000000000000036)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 8000
**** Input expression: 8000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32768 (0000000000008000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0016
**** Input expression: 0016  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 22 (0000000000000016)
Full Integer expression: 002E
**** Input expression: 002E  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 46 (000000000000002E)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 32
**** Input expression: 32  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 50 (0000000000000032)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 1122334455667788
**** Input expression: 1122334455667788  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1432778632 (1122334455667788)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 64
**** Input expression: 64  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 100 (0000000000000064)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 04
**** Input expression: 04  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4 (0000000000000004)
Full Integer expression: AABBCCDDEEFF0011
**** Input expression: AABBCCDDEEFF0011  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4009689105 (AABBCCDDEEFF0011)
Full Integer expression: 76543210
**** Input expression: 76543210  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1985229328 (0000000076543210)
Full Integer expression: FEDCBA98
**** Input expression: FEDCBA98  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4275878552 (00000000FEDCBA98)
Full Integer expression: EE
**** Input expression: EE  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 238 (00000000000000EE)
Full Integer expression: 0047
**** Input expression: 0047  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 71 (0000000000000047)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0011
**** Input expression: 0011  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 17 (0000000000000011)
Full Integer expression: 0026
**** Input expression: 0026  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 38 (0000000000000026)
Full Integer expression: 0010
**** Input expression: 0010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 0037
**** Input expression: 0037  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 55 (0000000000000037)
Full Integer expression: 8000
**** Input expression: 8000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32768 (0000000000008000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0016
**** Input expression: 0016  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 22 (0000000000000016)
Full Integer expression: 0022
**** Input expression: 0022  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 34 (0000000000000022)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 64
**** Input expression: 64  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 100 (0000000000000064)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 04
**** Input expression: 04  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4 (0000000000000004)
Full Integer expression: AABBCCDDEEFF0011
**** Input expression: AABBCCDDEEFF0011  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4009689105 (AABBCCDDEEFF0011)
Full Integer expression: FEDCBA98
**** Input expression: FEDCBA98  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4275878552 (00000000FEDCBA98)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 000003DC 00                           Signature : DBG2
0000000B 0000017E 00000021 00000030 000003E0 00                        Table Length : 000000B2
0000000C 000001B7 00000025 00000030 000003E4 00                            Revision : 01
0000000D 000001EA 00000025 00000030 000003E5 00                            Checksum : BA
0000000E 0000021D 00000027 00000030 000003E6 00                              Oem ID : INTEL 
0000000F 00000256 00000021 00000030 000003EC 00                        Oem Table ID : TEMPLATE
00000010 00000291 00000021 00000030 000003F4 00                        Oem Revision : 00000000
00000011 000002CA 0000001E 00000030 000003F8 01                     Asl Compiler ID : INTL
00000012 00000301 00000018 00000030 000003FC 01               Asl Compiler Revision : 20190703
00000014 0000033C 00000022 00000030 00000400 00                         Info Offset : 0000002C
00000015 00000375 00000023 00000030 00000404 00                          Info Count : 00000002
00000017 000003B0 00000025 00000030 00000408 00                            Revision : EE
00000018 000003E3 00000027 00000030 00000409 00                              Length : 003F
00000019 00000418 0000001F 00000030 0000040B 00                      Register Count : 02
0000001A 0000044B 0000001E 00000030 0000040C 00                     Namepath Length : 0009
0000001B 00000480 0000001E 00000030 0000040E 00                     Namepath Offset : 0036
0000001C 000004B5 0000001E 00000030 00000410 00                     OEM Data Length : 0000
0000001D 00000507 0000001E 00000030 00000412 00                     OEM Data Offset : 0000
0000001E 00000559 00000024 00000030 00000414 00                           Port Type : 8000
0000001F 0000058E 00000021 00000030 00000416 00                        Port Subtype : 0000
00000020 000005C3 00000025 00000030 00000418 00                            Reserved : 0000
00000021 000005F8 0000001A 00000030 0000041A 00                 Base Address Offset : 0016
00000022 0000062D 0000001A 00000030 0000041C 00                 Address Size Offset : 002E
00000025 000006B0 00000025 00000030 0000042A 00                            Space ID : 01
00000026 000006EE 00000024 00000030 0000042B 00                           Bit Width : 32
00000027 00000721 00000023 00000030 0000042C 00                          Bit Offset : 00
00000028 00000754 00000019 00000030 0000042D 00                Encoded Access Width : 03
00000029 00000799 00000026 00000030 0000042E 00                             Address : 1122334455667788
0000002D 0000082A 00000025 00000030 00000442 00                            Space ID : 01
0000002E 00000868 00000024 00000030 00000443 00                           Bit Width : 64
0000002F 0000089B 00000023 00000030 00000444 00                          Bit Offset : 00
00000030 000008CE 00000019 00000030 00000445 00                Encoded Access Width : 04
00000031 00000913 00000026 00000030 00000446 00                             Address : AABBCCDDEEFF0011
00000033 00000956 00000021 00000030 0000044E 00                        Address Size : 76543210
00000034 0000098F 00000021 00000030 00000452 00                        Address Size : FEDCBA98
00000036 000009CA 00000025 00000030 00000456 00                            Namepath : MyDevice
00000038 00000A07 00000025 00000030 0000045F 00                            Revision : EE
00000039 00000A3A 00000027 00000030 00000460 00                              Length : 0047
0000003A 00000A6F 0000001F 00000030 00000462 00                      Register Count : 01
0000003B 00000AA2 0000001E 00000030 00000463 00                     Namepath Length : 0011
0000003C 00000AD7 0000001E 00000030 00000465 00                     Namepath Offset : 0026
0000003D 00000B0C 0000001E 00000030 00000467 00                     OEM Data Length : 0010
0000003E 00000B41 0000001E 00000030 00000469 00                     OEM Data Offset : 0037
0000003F 00000B76 00000024 00000030 0000046B 00                           Port Type : 8000
00000040 00000BAB 00000021 00000030 0000046D 00                        Port Subtype : 0000
00000041 00000BE0 00000025 00000030 0000046F 00                            Reserved : 0000
00000042 00000C15 0000001A 00000030 00000471 00                 Base Address Offset : 0016
00000043 00000C4A 0000001A 00000030 00000473 00                 Address Size Offset : 0022
00000046 00000CCD 00000025 00000030 00000481 00                            Space ID : 01
00000047 00000D0B 00000024 00000030 00000482 00                           Bit Width : 64
00000048 00000D3E 00000023 00000030 00000483 00                          Bit Offset : 00
00000049 00000D71 00000019 00000030 00000484 00                Encoded Access Width : 04
0000004A 00000DB6 00000026 00000030 00000485 00                             Address : AABBCCDDEEFF0011
0000004C 00000DF9 00000021 00000030 0000048D 00                        Address Size : FEDCBA98
0000004E 00000E34 00000025 00000030 00000491 00                            Namepath : \\_SB_.PCI0.DBGP
0000004F 00000E77 00000025 00000030 000004A2 00                            OEM Data : 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 000000B2 00000004 00000000 03017C74 00000000 03017CA0 00000000
[0001]              Info Offset 00000008 0000008E 00000000 00000000 03017CA0 03017C74 03017CCC 00000000
[0002]                 Revision 00000016 0000003F 00000002 00000000 03017CCC 03017CA0 03017CF8 03017E2C
[0003]                 Space ID 0000000C 0000000C 00000000 00000000 03017CF8 03017CCC 00000000 03017D50
[0003]                 Space ID 0000000C 0000000C 00000000 00000000 03017D50 03017CCC 00000000 03017DA8
[0003]             Address Size 00000004 00000004 00000000 00000000 03017DA8 03017CCC 00000000 03017DD4
[0003]             Address Size 00000004 00000004 00000000 00000000 03017DD4 03017CCC 00000000 03017E00
[0003]                 Namepath 00000009 00000009 00000000 00000000 03017E00 03017CCC 00000000 00000000
[0002]                 Revision 00000016 00000047 00000002 00000000 03017E2C 03017CA0 03017E58 00000000
[0003]                 Space ID 0000000C 0000000C 00000000 00000000 03017E58 03017E2C 00000000 03017EB0
[0003]             Address Size 00000004 00000004 00000000 00000000 03017EB0 03017E2C 00000000 03017EDC
[0003]                 Namepath 00000011 00000011 00000000 00000000 03017EDC 03017E2C 00000000 03017F08
[0003]                 OEM Data 00000010 00000010 00000000 00000000 03017F08 03017E2C 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03017C74 (24) - (B2)
[0001]              Info Offset     03017CA0 (08) - (8E)
[0002]                 Revision         03017CCC (16) - (3F)
[0003]                 Space ID             03017CF8 (0C) - (0C)
[0003]                 Space ID             03017D50 (0C) - (0C)
[0003]             Address Size             03017DA8 (04) - (04)
[0003]             Address Size             03017DD4 (04) - (04)
[0003]                 Namepath             03017E00 (09) - (09)
[0002]                 Revision         03017E2C (16) - (47)
[0003]                 Space ID             03017E58 (0C) - (0C)
[0003]             Address Size             03017EB0 (04) - (04)
[0003]                 Namepath             03017EDC (11) - (11)
[0003]                 OEM Data             03017F08 (10) - (10)

