
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "csrt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0168) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : CSRT
0000000B 00000181 00000021 00000030 00000000 00                        Table Length : 0000014C
0000000C 000001BA 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001ED 00000025 00000030 00000000 00                            Checksum : 0D
0000000E 00000220 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000259 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 00000294 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002CD 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000304 00000018 00000030 00000000 00               Asl Compiler Revision : 20121114
00000015 00000341 00000027 00000030 00000000 00                              Length : 00000088
00000016 0000037A 00000024 00000030 00000000 00                           Vendor ID : 4C544E49
00000017 000003B3 00000021 00000030 00000000 00                        Subvendor ID : 00000000
00000018 000003EC 00000024 00000030 00000000 00                           Device ID : 9C60
00000019 00000421 00000021 00000030 00000000 00                        Subdevice ID : 0000
0000001A 00000456 00000025 00000030 00000000 00                            Revision : 0002
0000001B 0000048B 00000025 00000030 00000000 00                            Reserved : 0000
0000001C 000004C0 0000001B 00000030 00000000 00                  Shared Info Length : 0000001C
0000001E 000004FB 00000020 00000030 00000000 00                       Major Version : 0001
0000001F 00000530 00000020 00000030 00000000 00                       Minor Version : 0000
00000020 00000565 00000018 00000030 00000000 00               MMIO Base Address Low : B3A00000
00000021 0000059E 00000017 00000030 00000000 00              MMIO Base Address High : 00000000
00000022 000005D7 00000020 00000030 00000000 00                       GSI Interrupt : 0000002A
00000023 00000610 0000001B 00000030 00000000 00                  Interrupt Polarity : 02
00000024 00000643 0000001F 00000030 00000000 00                      Interrupt Mode : 00
00000025 00000676 00000021 00000030 00000000 00                        Num Channels : 06
00000026 000006A9 0000001C 00000030 00000000 00                   DMA Address Width : 20
00000027 000006DC 0000001C 00000030 00000000 00                   Base Request Line : 0000
00000028 00000711 00000018 00000030 00000000 00               Num Handshake Signals : 0010
00000029 00000746 0000001F 00000030 00000000 00                      Max Block Size : 00000FFF
0000002B 00000781 00000027 00000030 00000000 00                              Length : 0000000C
0000002C 000007BA 00000029 00000030 00000000 00                                Type : 0003
0000002D 000007EF 00000026 00000030 00000000 00                             Subtype : 0001
0000002E 00000824 0000002A 00000030 00000000 00                                 UID : 20495053
00000030 0000085F 00000027 00000030 00000000 00                              Length : 0000000C
00000031 00000898 00000029 00000030 00000000 00                                Type : 0003
00000032 000008CD 00000026 00000030 00000000 00                             Subtype : 0000
00000033 00000902 0000002A 00000030 00000000 00                                 UID : 30414843
00000035 0000093D 00000027 00000030 00000000 00                              Length : 0000000C
00000036 00000976 00000029 00000030 00000000 00                                Type : 0003
00000037 000009AB 00000026 00000030 00000000 00                             Subtype : 0000
00000038 000009E0 0000002A 00000030 00000000 00                                 UID : 31414843
0000003A 00000A1B 00000027 00000030 00000000 00                              Length : 0000000C
0000003B 00000A54 00000029 00000030 00000000 00                                Type : 0003
0000003C 00000A89 00000026 00000030 00000000 00                             Subtype : 0000
0000003D 00000ABE 0000002A 00000030 00000000 00                                 UID : 32414843
0000003F 00000AF9 00000027 00000030 00000000 00                              Length : 0000000C
00000040 00000B32 00000029 00000030 00000000 00                                Type : 0003
00000041 00000B67 00000026 00000030 00000000 00                             Subtype : 0000
00000042 00000B9C 0000002A 00000030 00000000 00                                 UID : 33414843
00000044 00000BD7 00000027 00000030 00000000 00                              Length : 0000000C
00000045 00000C10 00000029 00000030 00000000 00                                Type : 0003
00000046 00000C45 00000026 00000030 00000000 00                             Subtype : 0000
00000047 00000C7A 0000002A 00000030 00000000 00                                 UID : 34414843
00000049 00000CB5 00000027 00000030 00000000 00                              Length : 0000000C
0000004A 00000CEE 00000029 00000030 00000000 00                                Type : 0003
0000004B 00000D23 00000026 00000030 00000000 00                             Subtype : 0000
0000004C 00000D58 0000002A 00000030 00000000 00                                 UID : 35414843
0000004E 00000D93 00000027 00000030 00000000 00                              Length : 000000A0
0000004F 00000DCC 00000024 00000030 00000000 00                           Vendor ID : 4C544E49
00000050 00000E05 00000021 00000030 00000000 00                        Subvendor ID : 00000000
00000051 00000E3E 00000024 00000030 00000000 00                           Device ID : 9C60
00000052 00000E73 00000021 00000030 00000000 00                        Subdevice ID : 0000
00000053 00000EA8 00000025 00000030 00000000 00                            Revision : 0003
00000054 00000EDD 00000025 00000030 00000000 00                            Reserved : 0000
00000055 00000F12 0000001B 00000030 00000000 00                  Shared Info Length : 0000001C
00000057 00000F4D 00000020 00000030 00000000 00                       Major Version : 0001
00000058 00000F82 00000020 00000030 00000000 00                       Minor Version : 0000
00000059 00000FB7 00000018 00000030 00000000 00               MMIO Base Address Low : 00000000
0000005A 00000FF0 00000017 00000030 00000000 00              MMIO Base Address High : 00000000
0000005B 00001029 00000020 00000030 00000000 00                       GSI Interrupt : 0000002B
0000005C 00001062 0000001B 00000030 00000000 00                  Interrupt Polarity : 02
0000005D 00001095 0000001F 00000030 00000000 00                      Interrupt Mode : 00
0000005E 000010C8 00000021 00000030 00000000 00                        Num Channels : 08
0000005F 000010FB 0000001C 00000030 00000000 00                   DMA Address Width : 20
00000060 0000112E 0000001C 00000030 00000000 00                   Base Request Line : 0010
00000061 00001163 00000018 00000030 00000000 00               Num Handshake Signals : 0010
00000062 00001198 0000001F 00000030 00000000 00                      Max Block Size : 00000FFF
00000064 000011D3 00000027 00000030 00000000 00                              Length : 0000000C
00000065 0000120C 00000029 00000030 00000000 00                                Type : 0003
00000066 00001241 00000026 00000030 00000000 00                             Subtype : 0001
00000067 00001276 0000002A 00000030 00000000 00                                 UID : 20433249
00000069 000012B1 00000027 00000030 00000000 00                              Length : 0000000C
0000006A 000012EA 00000029 00000030 00000000 00                                Type : 0003
0000006B 0000131F 00000026 00000030 00000000 00                             Subtype : 0000
0000006C 00001354 0000002A 00000030 00000000 00                                 UID : 30414843
0000006E 0000138F 00000027 00000030 00000000 00                              Length : 0000000C
0000006F 000013C8 00000029 00000030 00000000 00                                Type : 0003
00000070 000013FD 00000026 00000030 00000000 00                             Subtype : 0000
00000071 00001432 0000002A 00000030 00000000 00                                 UID : 31414843
00000073 0000146D 00000027 00000030 00000000 00                              Length : 0000000C
00000074 000014A6 00000029 00000030 00000000 00                                Type : 0003
00000075 000014DB 00000026 00000030 00000000 00                             Subtype : 0000
00000076 00001510 0000002A 00000030 00000000 00                                 UID : 32414843
00000078 0000154B 00000027 00000030 00000000 00                              Length : 0000000C
00000079 00001584 00000029 00000030 00000000 00                                Type : 0003
0000007A 000015B9 00000026 00000030 00000000 00                             Subtype : 0000
0000007B 000015EE 0000002A 00000030 00000000 00                                 UID : 33414843
0000007D 00001629 00000027 00000030 00000000 00                              Length : 0000000C
0000007E 00001662 00000029 00000030 00000000 00                                Type : 0003
0000007F 00001697 00000026 00000030 00000000 00                             Subtype : 0000
00000080 000016CC 0000002A 00000030 00000000 00                                 UID : 34414843
00000082 00001707 00000027 00000030 00000000 00                              Length : 0000000C
00000083 00001740 00000029 00000030 00000000 00                                Type : 0003
00000084 00001775 00000026 00000030 00000000 00                             Subtype : 0000
00000085 000017AA 0000002A 00000030 00000000 00                                 UID : 35414843
00000087 000017E5 00000027 00000030 00000000 00                              Length : 0000000C
00000088 0000181E 00000029 00000030 00000000 00                                Type : 0003
00000089 00001853 00000026 00000030 00000000 00                             Subtype : 0000
0000008A 00001888 0000002A 00000030 00000000 00                                 UID : 36414843
0000008C 000018C3 00000027 00000030 00000000 00                              Length : 0000000C
0000008D 000018FC 00000029 00000030 00000000 00                                Type : 0003
0000008E 00001931 00000026 00000030 00000000 00                             Subtype : 0000
0000008F 00001966 0000002A 00000030 00000000 00                                 UID : 37414843


Full Integer expression: 0000014C
**** Input expression: 0000014C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 332 (000000000000014C)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0D
**** Input expression: 0D  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 13 (000000000000000D)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00000088
**** Input expression: 00000088  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 136 (0000000000000088)
Full Integer expression: 4C544E49
**** Input expression: 4C544E49  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1280593481 (000000004C544E49)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 9C60
**** Input expression: 9C60  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 40032 (0000000000009C60)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0002
**** Input expression: 0002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000001C
**** Input expression: 0000001C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 28 (000000000000001C)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: B3A00000
**** Input expression: B3A00000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3013607424 (00000000B3A00000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000002A
**** Input expression: 0000002A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 42 (000000000000002A)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 06
**** Input expression: 06  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 6 (0000000000000006)
Full Integer expression: 20
**** Input expression: 20  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0010
**** Input expression: 0010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00000FFF
**** Input expression: 00000FFF  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4095 (0000000000000FFF)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20495053
**** Input expression: 20495053  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 541675603 (0000000020495053)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 30414843
**** Input expression: 30414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 809584707 (0000000030414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 31414843
**** Input expression: 31414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 826361923 (0000000031414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 32414843
**** Input expression: 32414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 843139139 (0000000032414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 33414843
**** Input expression: 33414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 859916355 (0000000033414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 34414843
**** Input expression: 34414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 876693571 (0000000034414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 35414843
**** Input expression: 35414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 893470787 (0000000035414843)
Full Integer expression: 000000A0
**** Input expression: 000000A0  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 160 (00000000000000A0)
Full Integer expression: 4C544E49
**** Input expression: 4C544E49  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1280593481 (000000004C544E49)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 9C60
**** Input expression: 9C60  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 40032 (0000000000009C60)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000001C
**** Input expression: 0000001C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 28 (000000000000001C)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000002B
**** Input expression: 0000002B  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 43 (000000000000002B)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 20
**** Input expression: 20  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 0010
**** Input expression: 0010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 0010
**** Input expression: 0010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00000FFF
**** Input expression: 00000FFF  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4095 (0000000000000FFF)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20433249
**** Input expression: 20433249  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 541274697 (0000000020433249)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 30414843
**** Input expression: 30414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 809584707 (0000000030414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 31414843
**** Input expression: 31414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 826361923 (0000000031414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 32414843
**** Input expression: 32414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 843139139 (0000000032414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 33414843
**** Input expression: 33414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 859916355 (0000000033414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 34414843
**** Input expression: 34414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 876693571 (0000000034414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 35414843
**** Input expression: 35414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 893470787 (0000000035414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 36414843
**** Input expression: 36414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 910248003 (0000000036414843)
Full Integer expression: 0000000C
**** Input expression: 0000000C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 37414843
**** Input expression: 37414843  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 927025219 (0000000037414843)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000290 00                           Signature : CSRT
0000000B 00000181 00000021 00000030 00000294 00                        Table Length : 0000014C
0000000C 000001BA 00000025 00000030 00000298 00                            Revision : 01
0000000D 000001ED 00000025 00000030 00000299 00                            Checksum : 0D
0000000E 00000220 00000027 00000030 0000029A 00                              Oem ID : INTEL 
0000000F 00000259 00000021 00000030 000002A0 00                        Oem Table ID : TEMPLATE
00000010 00000294 00000021 00000030 000002A8 00                        Oem Revision : 00000001
00000011 000002CD 0000001E 00000030 000002AC 01                     Asl Compiler ID : INTL
00000012 00000304 00000018 00000030 000002B0 01               Asl Compiler Revision : 20190703
00000015 00000341 00000027 00000030 000002B4 00                              Length : 00000088
00000016 0000037A 00000024 00000030 000002B8 00                           Vendor ID : 4C544E49
00000017 000003B3 00000021 00000030 000002BC 00                        Subvendor ID : 00000000
00000018 000003EC 00000024 00000030 000002C0 00                           Device ID : 9C60
00000019 00000421 00000021 00000030 000002C2 00                        Subdevice ID : 0000
0000001A 00000456 00000025 00000030 000002C4 00                            Revision : 0002
0000001B 0000048B 00000025 00000030 000002C6 00                            Reserved : 0000
0000001C 000004C0 0000001B 00000030 000002C8 00                  Shared Info Length : 0000001C
0000001E 000004FB 00000020 00000030 000002CC 00                       Major Version : 0001
0000001F 00000530 00000020 00000030 000002CE 00                       Minor Version : 0000
00000020 00000565 00000018 00000030 000002D0 00               MMIO Base Address Low : B3A00000
00000021 0000059E 00000017 00000030 000002D4 00              MMIO Base Address High : 00000000
00000022 000005D7 00000020 00000030 000002D8 00                       GSI Interrupt : 0000002A
00000023 00000610 0000001B 00000030 000002DC 00                  Interrupt Polarity : 02
00000024 00000643 0000001F 00000030 000002DD 00                      Interrupt Mode : 00
00000025 00000676 00000021 00000030 000002DE 00                        Num Channels : 06
00000026 000006A9 0000001C 00000030 000002DF 00                   DMA Address Width : 20
00000027 000006DC 0000001C 00000030 000002E0 00                   Base Request Line : 0000
00000028 00000711 00000018 00000030 000002E2 00               Num Handshake Signals : 0010
00000029 00000746 0000001F 00000030 000002E4 00                      Max Block Size : 00000FFF
0000002B 00000781 00000027 00000030 000002E8 00                              Length : 0000000C
0000002C 000007BA 00000029 00000030 000002EC 00                                Type : 0003
0000002D 000007EF 00000026 00000030 000002EE 00                             Subtype : 0001
0000002E 00000824 0000002A 00000030 000002F0 00                                 UID : 20495053
00000030 0000085F 00000027 00000030 000002F4 00                              Length : 0000000C
00000031 00000898 00000029 00000030 000002F8 00                                Type : 0003
00000032 000008CD 00000026 00000030 000002FA 00                             Subtype : 0000
00000033 00000902 0000002A 00000030 000002FC 00                                 UID : 30414843
00000035 0000093D 00000027 00000030 00000300 00                              Length : 0000000C
00000036 00000976 00000029 00000030 00000304 00                                Type : 0003
00000037 000009AB 00000026 00000030 00000306 00                             Subtype : 0000
00000038 000009E0 0000002A 00000030 00000308 00                                 UID : 31414843
0000003A 00000A1B 00000027 00000030 0000030C 00                              Length : 0000000C
0000003B 00000A54 00000029 00000030 00000310 00                                Type : 0003
0000003C 00000A89 00000026 00000030 00000312 00                             Subtype : 0000
0000003D 00000ABE 0000002A 00000030 00000314 00                                 UID : 32414843
0000003F 00000AF9 00000027 00000030 00000318 00                              Length : 0000000C
00000040 00000B32 00000029 00000030 0000031C 00                                Type : 0003
00000041 00000B67 00000026 00000030 0000031E 00                             Subtype : 0000
00000042 00000B9C 0000002A 00000030 00000320 00                                 UID : 33414843
00000044 00000BD7 00000027 00000030 00000324 00                              Length : 0000000C
00000045 00000C10 00000029 00000030 00000328 00                                Type : 0003
00000046 00000C45 00000026 00000030 0000032A 00                             Subtype : 0000
00000047 00000C7A 0000002A 00000030 0000032C 00                                 UID : 34414843
00000049 00000CB5 00000027 00000030 00000330 00                              Length : 0000000C
0000004A 00000CEE 00000029 00000030 00000334 00                                Type : 0003
0000004B 00000D23 00000026 00000030 00000336 00                             Subtype : 0000
0000004C 00000D58 0000002A 00000030 00000338 00                                 UID : 35414843
0000004E 00000D93 00000027 00000030 0000033C 00                              Length : 000000A0
0000004F 00000DCC 00000024 00000030 00000340 00                           Vendor ID : 4C544E49
00000050 00000E05 00000021 00000030 00000344 00                        Subvendor ID : 00000000
00000051 00000E3E 00000024 00000030 00000348 00                           Device ID : 9C60
00000052 00000E73 00000021 00000030 0000034A 00                        Subdevice ID : 0000
00000053 00000EA8 00000025 00000030 0000034C 00                            Revision : 0003
00000054 00000EDD 00000025 00000030 0000034E 00                            Reserved : 0000
00000055 00000F12 0000001B 00000030 00000350 00                  Shared Info Length : 0000001C
00000057 00000F4D 00000020 00000030 00000354 00                       Major Version : 0001
00000058 00000F82 00000020 00000030 00000356 00                       Minor Version : 0000
00000059 00000FB7 00000018 00000030 00000358 00               MMIO Base Address Low : 00000000
0000005A 00000FF0 00000017 00000030 0000035C 00              MMIO Base Address High : 00000000
0000005B 00001029 00000020 00000030 00000360 00                       GSI Interrupt : 0000002B
0000005C 00001062 0000001B 00000030 00000364 00                  Interrupt Polarity : 02
0000005D 00001095 0000001F 00000030 00000365 00                      Interrupt Mode : 00
0000005E 000010C8 00000021 00000030 00000366 00                        Num Channels : 08
0000005F 000010FB 0000001C 00000030 00000367 00                   DMA Address Width : 20
00000060 0000112E 0000001C 00000030 00000368 00                   Base Request Line : 0010
00000061 00001163 00000018 00000030 0000036A 00               Num Handshake Signals : 0010
00000062 00001198 0000001F 00000030 0000036C 00                      Max Block Size : 00000FFF
00000064 000011D3 00000027 00000030 00000370 00                              Length : 0000000C
00000065 0000120C 00000029 00000030 00000374 00                                Type : 0003
00000066 00001241 00000026 00000030 00000376 00                             Subtype : 0001
00000067 00001276 0000002A 00000030 00000378 00                                 UID : 20433249
00000069 000012B1 00000027 00000030 0000037C 00                              Length : 0000000C
0000006A 000012EA 00000029 00000030 00000380 00                                Type : 0003
0000006B 0000131F 00000026 00000030 00000382 00                             Subtype : 0000
0000006C 00001354 0000002A 00000030 00000384 00                                 UID : 30414843
0000006E 0000138F 00000027 00000030 00000388 00                              Length : 0000000C
0000006F 000013C8 00000029 00000030 0000038C 00                                Type : 0003
00000070 000013FD 00000026 00000030 0000038E 00                             Subtype : 0000
00000071 00001432 0000002A 00000030 00000390 00                                 UID : 31414843
00000073 0000146D 00000027 00000030 00000394 00                              Length : 0000000C
00000074 000014A6 00000029 00000030 00000398 00                                Type : 0003
00000075 000014DB 00000026 00000030 0000039A 00                             Subtype : 0000
00000076 00001510 0000002A 00000030 0000039C 00                                 UID : 32414843
00000078 0000154B 00000027 00000030 000003A0 00                              Length : 0000000C
00000079 00001584 00000029 00000030 000003A4 00                                Type : 0003
0000007A 000015B9 00000026 00000030 000003A6 00                             Subtype : 0000
0000007B 000015EE 0000002A 00000030 000003A8 00                                 UID : 33414843
0000007D 00001629 00000027 00000030 000003AC 00                              Length : 0000000C
0000007E 00001662 00000029 00000030 000003B0 00                                Type : 0003
0000007F 00001697 00000026 00000030 000003B2 00                             Subtype : 0000
00000080 000016CC 0000002A 00000030 000003B4 00                                 UID : 34414843
00000082 00001707 00000027 00000030 000003B8 00                              Length : 0000000C
00000083 00001740 00000029 00000030 000003BC 00                                Type : 0003
00000084 00001775 00000026 00000030 000003BE 00                             Subtype : 0000
00000085 000017AA 0000002A 00000030 000003C0 00                                 UID : 35414843
00000087 000017E5 00000027 00000030 000003C4 00                              Length : 0000000C
00000088 0000181E 00000029 00000030 000003C8 00                                Type : 0003
00000089 00001853 00000026 00000030 000003CA 00                             Subtype : 0000
0000008A 00001888 0000002A 00000030 000003CC 00                                 UID : 36414843
0000008C 000018C3 00000027 00000030 000003D0 00                              Length : 0000000C
0000008D 000018FC 00000029 00000030 000003D4 00                                Type : 0003
0000008E 00001931 00000026 00000030 000003D6 00                             Subtype : 0000
0000008F 00001966 0000002A 00000030 000003D8 00                                 UID : 37414843


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 0000014C 00000004 00000000 030178D8 00000000 03017904 00000000
[0001]                   Length 00000018 00000088 00000004 00000000 03017904 030178D8 03017930 03017A90
[0002]            Major Version 0000001C 0000001C 00000000 00000000 03017930 03017904 00000000 0301795C
[0002]                   Length 0000000C 0000000C 00000004 00000000 0301795C 03017904 00000000 03017988
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017988 03017904 00000000 030179B4
[0002]                   Length 0000000C 0000000C 00000004 00000000 030179B4 03017904 00000000 030179E0
[0002]                   Length 0000000C 0000000C 00000004 00000000 030179E0 03017904 00000000 03017A0C
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017A0C 03017904 00000000 03017A38
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017A38 03017904 00000000 03017A64
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017A64 03017904 00000000 00000000
[0001]                   Length 00000018 000000A0 00000004 00000000 03017A90 030178D8 03017ABC 00000000
[0002]            Major Version 0000001C 0000001C 00000000 00000000 03017ABC 03017A90 00000000 03017AE8
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017AE8 03017A90 00000000 03017B14
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017B14 03017A90 00000000 03017B40
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017B40 03017A90 00000000 03017B6C
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017B6C 03017A90 00000000 03017B98
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017B98 03017A90 00000000 03017BC4
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017BC4 03017A90 00000000 03017BF0
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017BF0 03017A90 00000000 03017C1C
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017C1C 03017A90 00000000 03017C48
[0002]                   Length 0000000C 0000000C 00000004 00000000 03017C48 03017A90 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030178D8 (24) - (14C)
[0001]                   Length     03017904 (18) - (88)
[0002]            Major Version         03017930 (1C) - (1C)
[0002]                   Length         0301795C (0C) - (0C)
[0002]                   Length         03017988 (0C) - (0C)
[0002]                   Length         030179B4 (0C) - (0C)
[0002]                   Length         030179E0 (0C) - (0C)
[0002]                   Length         03017A0C (0C) - (0C)
[0002]                   Length         03017A38 (0C) - (0C)
[0002]                   Length         03017A64 (0C) - (0C)
[0001]                   Length     03017A90 (18) - (A0)
[0002]            Major Version         03017ABC (1C) - (1C)
[0002]                   Length         03017AE8 (0C) - (0C)
[0002]                   Length         03017B14 (0C) - (0C)
[0002]                   Length         03017B40 (0C) - (0C)
[0002]                   Length         03017B6C (0C) - (0C)
[0002]                   Length         03017B98 (0C) - (0C)
[0002]                   Length         03017BC4 (0C) - (0C)
[0002]                   Length         03017BF0 (0C) - (0C)
[0002]                   Length         03017C1C (0C) - (0C)
[0002]                   Length         03017C48 (0C) - (0C)

