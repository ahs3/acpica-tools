
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "dmar.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0092) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : DMAR
0000000B 0000017A 00000021 00000030 00000000 00                        Table Length : 0000008C
0000000C 000001B3 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001E6 00000025 00000030 00000000 00                            Checksum : 03
0000000E 00000219 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000252 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 0000028D 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002C6 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 000002FD 00000018 00000030 00000000 00               Asl Compiler Revision : 20130517
00000014 00000338 0000001B 00000030 00000000 00                  Host Address Width : 2F
00000015 0000036B 00000028 00000030 00000000 00                               Flags : 01
00000016 0000039E 00000025 00000030 00000000 00                            Reserved : 00 00 00 00 00 00 00 00 00 00
00000018 000003EE 00000020 00000030 00000000 00                       Subtable Type : 0000
00000019 0000043E 00000027 00000030 00000000 00                              Length : 0018
0000001B 00000475 00000028 00000030 00000000 00                               Flags : 01
0000001C 000004A8 00000025 00000030 00000000 00                            Reserved : 00
0000001D 000004DB 0000001B 00000030 00000000 00                  PCI Segment Number : 0000
0000001E 00000510 00000018 00000030 00000000 00               Register Base Address : 0000000000000000
00000020 00000553 0000001C 00000030 00000000 00                   Device Scope Type : 03
00000021 00000596 00000021 00000030 00000000 00                        Entry Length : 08
00000022 000005C9 00000025 00000030 00000000 00                            Reserved : 0000
00000023 000005FE 0000001F 00000030 00000000 00                      Enumeration ID : 08
00000024 00000631 0000001F 00000030 00000000 00                      PCI Bus Number : 00
00000026 00000666 00000025 00000030 00000000 00                            PCI Path : 00,01
00000029 000006A0 00000020 00000030 00000000 00                       Subtable Type : 0001
0000002A 000006EE 00000027 00000030 00000000 00                              Length : 0020
0000002C 00000725 00000025 00000030 00000000 00                            Reserved : 0000
0000002D 0000075A 0000001B 00000030 00000000 00                  PCI Segment Number : 0000
0000002E 0000078F 00000021 00000030 00000000 00                        Base Address : 0000000000000000
0000002F 000007D0 0000001A 00000030 00000000 00                 End Address (limit) : 0000000000000FFF
00000031 00000813 0000001C 00000030 00000000 00                   Device Scope Type : 01
00000032 0000085C 00000021 00000030 00000000 00                        Entry Length : 08
00000033 0000088F 00000025 00000030 00000000 00                            Reserved : 0000
00000034 000008C4 0000001F 00000030 00000000 00                      Enumeration ID : 00
00000035 000008F7 0000001F 00000030 00000000 00                      PCI Bus Number : 00
00000037 0000092C 00000025 00000030 00000000 00                            PCI Path : 00,02
0000003A 00000966 00000020 00000030 00000000 00                       Subtable Type : 0002
0000003B 000009B6 00000027 00000030 00000000 00                              Length : 0010
0000003D 000009ED 00000028 00000030 00000000 00                               Flags : 00
0000003E 00000A20 00000025 00000030 00000000 00                            Reserved : 00
0000003F 00000A53 0000001B 00000030 00000000 00                  PCI Segment Number : 0000
00000041 00000A8A 0000001C 00000030 00000000 00                   Device Scope Type : 02
00000042 00000AD1 00000021 00000030 00000000 00                        Entry Length : 08
00000043 00000B04 00000025 00000030 00000000 00                            Reserved : 0000
00000044 00000B39 0000001F 00000030 00000000 00                      Enumeration ID : 00
00000045 00000B6C 0000001F 00000030 00000000 00                      PCI Bus Number : 00
00000047 00000BA1 00000025 00000030 00000000 00                            PCI Path : 00,03
0000004A 00000BDB 00000020 00000030 00000000 00                       Subtable Type : 0003
0000004B 00000C35 00000027 00000030 00000000 00                              Length : 0014
0000004D 00000C6C 00000025 00000030 00000000 00                            Reserved : 00000000
0000004E 00000CA5 00000021 00000030 00000000 00                        Base Address : 0000000000000000
0000004F 00000CE6 0000001D 00000030 00000000 00                    Proximity Domain : 00000000


Full Integer expression: 0000008C
**** Input expression: 0000008C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 140 (000000000000008C)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 2F
**** Input expression: 2F  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 47 (000000000000002F)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0018
**** Input expression: 0018  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0001
**** Input expression: 0001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0020
**** Input expression: 0020  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000FFF
**** Input expression: 0000000000000FFF  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4095 (0000000000000FFF)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0002
**** Input expression: 0002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0010
**** Input expression: 0010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0003
**** Input expression: 0003  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 0014
**** Input expression: 0014  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 20 (0000000000000014)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 000004F2 00                           Signature : DMAR
0000000B 0000017A 00000021 00000030 000004F6 00                        Table Length : 0000008C
0000000C 000001B3 00000025 00000030 000004FA 00                            Revision : 01
0000000D 000001E6 00000025 00000030 000004FB 00                            Checksum : 03
0000000E 00000219 00000027 00000030 000004FC 00                              Oem ID : INTEL 
0000000F 00000252 00000021 00000030 00000502 00                        Oem Table ID : TEMPLATE
00000010 0000028D 00000021 00000030 0000050A 00                        Oem Revision : 00000001
00000011 000002C6 0000001E 00000030 0000050E 01                     Asl Compiler ID : INTL
00000012 000002FD 00000018 00000030 00000512 01               Asl Compiler Revision : 20190703
00000014 00000338 0000001B 00000030 00000516 00                  Host Address Width : 2F
00000015 0000036B 00000028 00000030 00000517 00                               Flags : 01
00000016 0000039E 00000025 00000030 00000518 00                            Reserved : 00 00 00 00 00 00 00 00 00 00
00000018 000003EE 00000020 00000030 00000522 00                       Subtable Type : 0000
00000019 0000043E 00000027 00000030 00000524 00                              Length : 0018
0000001B 00000475 00000028 00000030 00000526 00                               Flags : 01
0000001C 000004A8 00000025 00000030 00000527 00                            Reserved : 00
0000001D 000004DB 0000001B 00000030 00000528 00                  PCI Segment Number : 0000
0000001E 00000510 00000018 00000030 0000052A 00               Register Base Address : 0000000000000000
00000020 00000553 0000001C 00000030 00000532 00                   Device Scope Type : 03
00000021 00000596 00000021 00000030 00000533 00                        Entry Length : 08
00000022 000005C9 00000025 00000030 00000534 00                            Reserved : 0000
00000023 000005FE 0000001F 00000030 00000536 00                      Enumeration ID : 08
00000024 00000631 0000001F 00000030 00000537 00                      PCI Bus Number : 00
00000026 00000666 00000025 00000030 00000538 00                            PCI Path : 00,01
00000029 000006A0 00000020 00000030 0000053A 00                       Subtable Type : 0001
0000002A 000006EE 00000027 00000030 0000053C 00                              Length : 0020
0000002C 00000725 00000025 00000030 0000053E 00                            Reserved : 0000
0000002D 0000075A 0000001B 00000030 00000540 00                  PCI Segment Number : 0000
0000002E 0000078F 00000021 00000030 00000542 00                        Base Address : 0000000000000000
0000002F 000007D0 0000001A 00000030 0000054A 00                 End Address (limit) : 0000000000000FFF
00000031 00000813 0000001C 00000030 00000552 00                   Device Scope Type : 01
00000032 0000085C 00000021 00000030 00000553 00                        Entry Length : 08
00000033 0000088F 00000025 00000030 00000554 00                            Reserved : 0000
00000034 000008C4 0000001F 00000030 00000556 00                      Enumeration ID : 00
00000035 000008F7 0000001F 00000030 00000557 00                      PCI Bus Number : 00
00000037 0000092C 00000025 00000030 00000558 00                            PCI Path : 00,02
0000003A 00000966 00000020 00000030 0000055A 00                       Subtable Type : 0002
0000003B 000009B6 00000027 00000030 0000055C 00                              Length : 0010
0000003D 000009ED 00000028 00000030 0000055E 00                               Flags : 00
0000003E 00000A20 00000025 00000030 0000055F 00                            Reserved : 00
0000003F 00000A53 0000001B 00000030 00000560 00                  PCI Segment Number : 0000
00000041 00000A8A 0000001C 00000030 00000562 00                   Device Scope Type : 02
00000042 00000AD1 00000021 00000030 00000563 00                        Entry Length : 08
00000043 00000B04 00000025 00000030 00000564 00                            Reserved : 0000
00000044 00000B39 0000001F 00000030 00000566 00                      Enumeration ID : 00
00000045 00000B6C 0000001F 00000030 00000567 00                      PCI Bus Number : 00
00000047 00000BA1 00000025 00000030 00000568 00                            PCI Path : 00,03
0000004A 00000BDB 00000020 00000030 0000056A 00                       Subtable Type : 0003
0000004B 00000C35 00000027 00000030 0000056C 00                              Length : 0014
0000004D 00000C6C 00000025 00000030 0000056E 00                            Reserved : 00000000
0000004E 00000CA5 00000021 00000030 00000572 00                        Base Address : 0000000000000000
0000004F 00000CE6 0000001D 00000030 0000057A 00                    Proximity Domain : 00000000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 0000008C 00000004 00000000 03017FB8 00000000 03017FE4 00000000
[0001]       Host Address Width 0000000C 00000068 00000000 00000000 03017FE4 03017FB8 03018010 00000000
[0002]            Subtable Type 00000004 00000018 00000002 00000000 03018010 03017FE4 0301803C 030180C0
[0003]                    Flags 0000000C 00000014 00000000 00000000 0301803C 03018010 03018068 00000000
[0004]        Device Scope Type 00000006 00000008 00000001 00000000 03018068 0301803C 03018094 00000000
[0005]                 PCI Path 00000002 00000002 00000000 00000000 03018094 03018068 00000000 00000000
[0002]            Subtable Type 00000004 00000020 00000002 00000000 030180C0 03017FE4 030180EC 03018170
[0003]                 Reserved 00000014 0000001C 00000000 00000000 030180EC 030180C0 03018118 00000000
[0004]        Device Scope Type 00000006 00000008 00000001 00000000 03018118 030180EC 03018144 00000000
[0005]                 PCI Path 00000002 00000002 00000000 00000000 03018144 03018118 00000000 00000000
[0002]            Subtable Type 00000004 00000010 00000002 00000000 03018170 03017FE4 0301819C 03018220
[0003]                    Flags 00000004 0000000C 00000000 00000000 0301819C 03018170 030181C8 00000000
[0004]        Device Scope Type 00000006 00000008 00000001 00000000 030181C8 0301819C 030181F4 00000000
[0005]                 PCI Path 00000002 00000002 00000000 00000000 030181F4 030181C8 00000000 00000000
[0002]            Subtable Type 00000004 00000014 00000002 00000000 03018220 03017FE4 0301824C 00000000
[0003]                 Reserved 00000010 00000010 00000000 00000000 0301824C 03018220 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03017FB8 (24) - (8C)
[0001]       Host Address Width     03017FE4 (0C) - (68)
[0002]            Subtable Type         03018010 (04) - (18)
[0003]                    Flags             0301803C (0C) - (14)
[0004]        Device Scope Type                 03018068 (06) - (08)
[0005]                 PCI Path                     03018094 (02) - (02)
[0002]            Subtable Type         030180C0 (04) - (20)
[0003]                 Reserved             030180EC (14) - (1C)
[0004]        Device Scope Type                 03018118 (06) - (08)
[0005]                 PCI Path                     03018144 (02) - (02)
[0002]            Subtable Type         03018170 (04) - (10)
[0003]                    Flags             0301819C (04) - (0C)
[0004]        Device Scope Type                 030181C8 (06) - (08)
[0005]                 PCI Path                     030181F4 (02) - (02)
[0002]            Subtable Type         03018220 (04) - (14)
[0003]                 Reserved             0301824C (10) - (10)

