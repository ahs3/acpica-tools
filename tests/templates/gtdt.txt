
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "gtdt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0120) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : GTDT
0000000B 00000186 00000021 00000030 00000000 00                        Table Length : 000000E8
0000000C 000001BF 00000025 00000030 00000000 00                            Revision : 03
0000000D 000001F2 00000025 00000030 00000000 00                            Checksum : 5D
0000000E 00000225 00000027 00000030 00000000 00                              Oem ID : LINARO
0000000F 0000025E 00000021 00000030 00000000 00                        Oem Table ID : RTSMVEV8
00000010 00000299 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002D2 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 00000309 00000018 00000030 00000000 00               Asl Compiler Revision : 20190108
00000014 00000344 00000018 00000030 00000000 00               Counter Block Address : 0000000000000000
00000015 00000385 00000025 00000030 00000000 00                            Reserved : 00000000
00000017 000003C0 00000019 00000030 00000000 00                Secure EL1 Interrupt : 0000001D
00000018 000003F9 00000014 00000030 00000000 00           EL1 Flags (decoded below) : 00000001
00000019 00000432 00000021 00000030 00000000 00                        Trigger Mode : 1
0000001A 00000464 00000025 00000030 00000000 00                            Polarity : 0
0000001B 00000496 00000024 00000030 00000000 00                           Always On : 0
0000001D 000004CA 00000015 00000030 00000000 00            Non-Secure EL1 Interrupt : 0000001E
0000001E 00000503 00000013 00000030 00000000 00          NEL1 Flags (decoded below) : 00000001
0000001F 0000053C 00000021 00000030 00000000 00                        Trigger Mode : 1
00000020 0000056E 00000025 00000030 00000000 00                            Polarity : 0
00000021 000005A0 00000024 00000030 00000000 00                           Always On : 0
00000023 000005D4 00000016 00000030 00000000 00             Virtual Timer Interrupt : 0000001B
00000024 0000060D 00000015 00000030 00000000 00            VT Flags (decoded below) : 00000001
00000025 00000646 00000021 00000030 00000000 00                        Trigger Mode : 1
00000026 00000678 00000025 00000030 00000000 00                            Polarity : 0
00000027 000006AA 00000024 00000030 00000000 00                           Always On : 0
00000029 000006DE 00000015 00000030 00000000 00            Non-Secure EL2 Interrupt : 0000001A
0000002A 00000717 00000013 00000030 00000000 00          NEL2 Flags (decoded below) : 00000001
0000002B 00000750 00000021 00000030 00000000 00                        Trigger Mode : 1
0000002C 00000782 00000025 00000030 00000000 00                            Polarity : 0
0000002D 000007B4 00000024 00000030 00000000 00                           Always On : 0
0000002E 000007E6 00000013 00000030 00000000 00          Counter Read Block Address : 0000000000000000
00000030 00000829 00000019 00000030 00000000 00                Platform Timer Count : 00000002
00000031 00000862 00000018 00000030 00000000 00               Platform Timer Offset : 00000060
00000032 0000089B 00000017 00000030 00000000 00              Virtual EL2 Timer GSIV : 00000043
00000033 000008D4 00000016 00000030 00000000 00             Virtual EL2 Timer Flags : 00000021
00000035 0000090F 00000020 00000030 00000000 00                       Subtable Type : 00
00000036 00000958 00000027 00000030 00000000 00                              Length : 0064
00000037 0000098D 00000025 00000030 00000000 00                            Reserved : 00
00000038 000009C0 00000020 00000030 00000000 00                       Block Address : 0000000000000000
00000039 00000A01 00000022 00000030 00000000 00                         Timer Count : 00000002
0000003A 00000A3A 00000021 00000030 00000000 00                        Timer Offset : 00000014
0000003C 00000A75 00000021 00000030 00000000 00                        Frame Number : 00
0000003D 00000AA8 00000025 00000030 00000000 00                            Reserved : 000000
0000003E 00000ADF 00000021 00000030 00000000 00                        Base Address : 0000000000000000
0000003F 00000B20 0000001D 00000030 00000000 00                    EL0 Base Address : 0000000000000000
00000040 00000B61 0000001E 00000030 00000000 00                     Timer Interrupt : 00000000
00000041 00000B9A 00000012 00000030 00000000 00         Timer Flags (decoded below) : 00000001
00000042 00000BD3 00000021 00000030 00000000 00                        Trigger Mode : 1
00000043 00000C05 00000025 00000030 00000000 00                            Polarity : 0
00000044 00000C37 00000016 00000030 00000000 00             Virtual Timer Interrupt : 00000000
00000045 00000C70 00000011 00000037 00000000 00    Virtual Timer Flags (decoded below) : 00000001
00000046 00000CB0 00000021 00000030 00000000 00                        Trigger Mode : 1
00000047 00000CE2 00000025 00000030 00000000 00                            Polarity : 0
00000048 00000D14 00000011 00000030 00000000 00        Common Flags (decoded below) : 00000000
00000049 00000D4D 00000027 00000030 00000000 00                              Secure : 0
0000004A 00000D7F 00000024 00000030 00000000 00                           Always On : 0
0000004C 00000DB3 00000021 00000030 00000000 00                        Frame Number : 01
0000004D 00000DE6 00000025 00000030 00000000 00                            Reserved : 000000
0000004E 00000E1D 00000021 00000030 00000000 00                        Base Address : 0000000000000000
0000004F 00000E5E 0000001D 00000030 00000000 00                    EL0 Base Address : 0000000000000000
00000050 00000E9F 0000001E 00000030 00000000 00                     Timer Interrupt : 00000000
00000051 00000ED8 00000012 00000030 00000000 00         Timer Flags (decoded below) : 00000001
00000052 00000F11 00000021 00000030 00000000 00                        Trigger Mode : 1
00000053 00000F43 00000025 00000030 00000000 00                            Polarity : 0
00000054 00000F75 00000016 00000030 00000000 00             Virtual Timer Interrupt : 00000000
00000055 00000FAE 00000011 00000037 00000000 00    Virtual Timer Flags (decoded below) : 00000001
00000056 00000FEE 00000021 00000030 00000000 00                        Trigger Mode : 1
00000057 00001020 00000025 00000030 00000000 00                            Polarity : 0
00000058 00001052 00000011 00000030 00000000 00        Common Flags (decoded below) : 00000000
00000059 0000108B 00000027 00000030 00000000 00                              Secure : 0
0000005A 000010BD 00000024 00000030 00000000 00                           Always On : 0
0000005C 000010F1 00000020 00000030 00000000 00                       Subtable Type : 01
0000005D 0000113D 00000027 00000030 00000000 00                              Length : 001C
0000005E 00001172 00000025 00000030 00000000 00                            Reserved : 00
0000005F 000011A5 00000018 00000030 00000000 00               Refresh Frame Address : 0000000000000000
00000060 000011E6 00000018 00000030 00000000 00               Control Frame Address : 0000000000000000
00000061 00001227 0000001E 00000030 00000000 00                     Timer Interrupt : 00000000
00000062 00001260 00000012 00000030 00000000 00         Timer Flags (decoded below) : 00000001
00000063 00001299 00000021 00000030 00000000 00                        Trigger Mode : 1
00000064 000012CB 00000025 00000030 00000000 00                            Polarity : 0
00000065 000012FD 00000025 00000030 00000000 00                            Security : 0


Full Integer expression: 000000E8
**** Input expression: 000000E8  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 232 (00000000000000E8)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 5D
**** Input expression: 5D  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 93 (000000000000005D)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000001D
**** Input expression: 0000001D  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 29 (000000000000001D)
Full Integer expression: 0000001E
**** Input expression: 0000001E  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 30 (000000000000001E)
Full Integer expression: 0000001B
**** Input expression: 0000001B  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 27 (000000000000001B)
Full Integer expression: 0000001A
**** Input expression: 0000001A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 26 (000000000000001A)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000002
**** Input expression: 00000002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00000060
**** Input expression: 00000060  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 96 (0000000000000060)
Full Integer expression: 00000043
**** Input expression: 00000043  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 67 (0000000000000043)
Full Integer expression: 00000021
**** Input expression: 00000021  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 33 (0000000000000021)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0064
**** Input expression: 0064  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 100 (0000000000000064)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000002
**** Input expression: 00000002  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 00000014
**** Input expression: 00000014  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 20 (0000000000000014)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 001C
**** Input expression: 001C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 28 (000000000000001C)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000CF0 00                           Signature : GTDT
0000000B 00000186 00000021 00000030 00000CF4 00                        Table Length : 000000E8
0000000C 000001BF 00000025 00000030 00000CF8 00                            Revision : 03
0000000D 000001F2 00000025 00000030 00000CF9 00                            Checksum : 5D
0000000E 00000225 00000027 00000030 00000CFA 00                              Oem ID : LINARO
0000000F 0000025E 00000021 00000030 00000D00 00                        Oem Table ID : RTSMVEV8
00000010 00000299 00000021 00000030 00000D08 00                        Oem Revision : 00000001
00000011 000002D2 0000001E 00000030 00000D0C 01                     Asl Compiler ID : INTL
00000012 00000309 00000018 00000030 00000D10 01               Asl Compiler Revision : 20190703
00000014 00000344 00000018 00000030 00000D14 00               Counter Block Address : 0000000000000000
00000015 00000385 00000025 00000030 00000D1C 00                            Reserved : 00000000
00000017 000003C0 00000019 00000030 00000D20 00                Secure EL1 Interrupt : 0000001D
00000018 000003F9 00000014 00000030 00000D24 00           EL1 Flags (decoded below) : 00000001
00000019 00000432 00000021 00000030 00000D28 00                        Trigger Mode : 1
0000001A 00000464 00000025 00000030 00000D28 00                            Polarity : 0
0000001B 00000496 00000024 00000030 00000D28 00                           Always On : 0
0000001D 000004CA 00000015 00000030 00000D28 00            Non-Secure EL1 Interrupt : 0000001E
0000001E 00000503 00000013 00000030 00000D2C 00          NEL1 Flags (decoded below) : 00000001
0000001F 0000053C 00000021 00000030 00000D30 00                        Trigger Mode : 1
00000020 0000056E 00000025 00000030 00000D30 00                            Polarity : 0
00000021 000005A0 00000024 00000030 00000D30 00                           Always On : 0
00000023 000005D4 00000016 00000030 00000D30 00             Virtual Timer Interrupt : 0000001B
00000024 0000060D 00000015 00000030 00000D34 00            VT Flags (decoded below) : 00000001
00000025 00000646 00000021 00000030 00000D38 00                        Trigger Mode : 1
00000026 00000678 00000025 00000030 00000D38 00                            Polarity : 0
00000027 000006AA 00000024 00000030 00000D38 00                           Always On : 0
00000029 000006DE 00000015 00000030 00000D38 00            Non-Secure EL2 Interrupt : 0000001A
0000002A 00000717 00000013 00000030 00000D3C 00          NEL2 Flags (decoded below) : 00000001
0000002B 00000750 00000021 00000030 00000D40 00                        Trigger Mode : 1
0000002C 00000782 00000025 00000030 00000D40 00                            Polarity : 0
0000002D 000007B4 00000024 00000030 00000D40 00                           Always On : 0
0000002E 000007E6 00000013 00000030 00000D40 00          Counter Read Block Address : 0000000000000000
00000030 00000829 00000019 00000030 00000D48 00                Platform Timer Count : 00000002
00000031 00000862 00000018 00000030 00000D4C 00               Platform Timer Offset : 00000060
00000032 0000089B 00000017 00000030 00000D50 00              Virtual EL2 Timer GSIV : 00000043
00000033 000008D4 00000016 00000030 00000D54 00             Virtual EL2 Timer Flags : 00000021
00000035 0000090F 00000020 00000030 00000D58 00                       Subtable Type : 00
00000036 00000958 00000027 00000030 00000D59 00                              Length : 0064
00000037 0000098D 00000025 00000030 00000D5B 00                            Reserved : 00
00000038 000009C0 00000020 00000030 00000D5C 00                       Block Address : 0000000000000000
00000039 00000A01 00000022 00000030 00000D64 00                         Timer Count : 00000002
0000003A 00000A3A 00000021 00000030 00000D68 00                        Timer Offset : 00000014
0000003C 00000A75 00000021 00000030 00000D6C 00                        Frame Number : 00
0000003D 00000AA8 00000025 00000030 00000D6D 00                            Reserved : 000000
0000003E 00000ADF 00000021 00000030 00000D70 00                        Base Address : 0000000000000000
0000003F 00000B20 0000001D 00000030 00000D78 00                    EL0 Base Address : 0000000000000000
00000040 00000B61 0000001E 00000030 00000D80 00                     Timer Interrupt : 00000000
00000041 00000B9A 00000012 00000030 00000D84 00         Timer Flags (decoded below) : 00000001
00000042 00000BD3 00000021 00000030 00000D88 00                        Trigger Mode : 1
00000043 00000C05 00000025 00000030 00000D88 00                            Polarity : 0
00000044 00000C37 00000016 00000030 00000D88 00             Virtual Timer Interrupt : 00000000
00000045 00000C70 00000011 00000037 00000D8C 00    Virtual Timer Flags (decoded below) : 00000001
00000046 00000CB0 00000021 00000030 00000D90 00                        Trigger Mode : 1
00000047 00000CE2 00000025 00000030 00000D90 00                            Polarity : 0
00000048 00000D14 00000011 00000030 00000D90 00        Common Flags (decoded below) : 00000000
00000049 00000D4D 00000027 00000030 00000D94 00                              Secure : 0
0000004A 00000D7F 00000024 00000030 00000D94 00                           Always On : 0
0000004C 00000DB3 00000021 00000030 00000D94 00                        Frame Number : 01
0000004D 00000DE6 00000025 00000030 00000D95 00                            Reserved : 000000
0000004E 00000E1D 00000021 00000030 00000D98 00                        Base Address : 0000000000000000
0000004F 00000E5E 0000001D 00000030 00000DA0 00                    EL0 Base Address : 0000000000000000
00000050 00000E9F 0000001E 00000030 00000DA8 00                     Timer Interrupt : 00000000
00000051 00000ED8 00000012 00000030 00000DAC 00         Timer Flags (decoded below) : 00000001
00000052 00000F11 00000021 00000030 00000DB0 00                        Trigger Mode : 1
00000053 00000F43 00000025 00000030 00000DB0 00                            Polarity : 0
00000054 00000F75 00000016 00000030 00000DB0 00             Virtual Timer Interrupt : 00000000
00000055 00000FAE 00000011 00000037 00000DB4 00    Virtual Timer Flags (decoded below) : 00000001
00000056 00000FEE 00000021 00000030 00000DB8 00                        Trigger Mode : 1
00000057 00001020 00000025 00000030 00000DB8 00                            Polarity : 0
00000058 00001052 00000011 00000030 00000DB8 00        Common Flags (decoded below) : 00000000
00000059 0000108B 00000027 00000030 00000DBC 00                              Secure : 0
0000005A 000010BD 00000024 00000030 00000DBC 00                           Always On : 0
0000005C 000010F1 00000020 00000030 00000DBC 00                       Subtable Type : 01
0000005D 0000113D 00000027 00000030 00000DBD 00                              Length : 001C
0000005E 00001172 00000025 00000030 00000DBF 00                            Reserved : 00
0000005F 000011A5 00000018 00000030 00000DC0 00               Refresh Frame Address : 0000000000000000
00000060 000011E6 00000018 00000030 00000DC8 00               Control Frame Address : 0000000000000000
00000061 00001227 0000001E 00000030 00000DD0 00                     Timer Interrupt : 00000000
00000062 00001260 00000012 00000030 00000DD4 00         Timer Flags (decoded below) : 00000001
00000063 00001299 00000021 00000030 00000DD8 00                        Trigger Mode : 1
00000064 000012CB 00000025 00000030 00000DD8 00                            Polarity : 0
00000065 000012FD 00000025 00000030 00000DD8 00                            Security : 0


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 000000E8 00000004 00000000 0303EDE0 00000000 0303EE0C 00000000
[0001]    Counter Block Address 0000003C 0000003C 00000000 00000000 0303EE0C 0303EDE0 00000000 0303EE38
[0001]   Virtual EL2 Timer GSIV 00000008 00000008 00000000 00000000 0303EE38 0303EDE0 00000000 0303EE64
[0001]            Subtable Type 00000003 00000064 00000002 00000000 0303EE64 0303EDE0 0303EE90 0303EF14
[0002]                 Reserved 00000011 00000061 00000000 00000000 0303EE90 0303EE64 0303EEBC 00000000
[0003]             Frame Number 00000028 00000028 00000000 00000000 0303EEBC 0303EE90 00000000 0303EEE8
[0003]             Frame Number 00000028 00000028 00000000 00000000 0303EEE8 0303EE90 00000000 00000000
[0001]            Subtable Type 00000003 0000001C 00000002 00000000 0303EF14 0303EDE0 0303EF40 00000000
[0002]                 Reserved 00000019 00000019 00000000 00000000 0303EF40 0303EF14 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  0303EDE0 (24) - (E8)
[0001]    Counter Block Address     0303EE0C (3C) - (3C)
[0001]   Virtual EL2 Timer GSIV     0303EE38 (08) - (08)
[0001]            Subtable Type     0303EE64 (03) - (64)
[0002]                 Reserved         0303EE90 (11) - (61)
[0003]             Frame Number             0303EEBC (28) - (28)
[0003]             Frame Number             0303EEE8 (28) - (28)
[0001]            Subtable Type     0303EF14 (03) - (1C)
[0002]                 Reserved         0303EF40 (19) - (19)

