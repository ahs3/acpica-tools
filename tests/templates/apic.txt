
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "apic.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0168) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

00000009 00000110 00000021 0000002D 00000000 00                           Signature : APIC
0000000A 00000170 0000001E 0000002D 00000000 00                        Table Length : 0000015A
0000000B 000001A6 00000022 0000002D 00000000 00                            Revision : 05
0000000C 000001D6 00000022 0000002D 00000000 00                            Checksum : EF
0000000D 00000206 00000024 0000002D 00000000 00                              Oem ID : INTEL 
0000000E 0000023C 0000001E 0000002D 00000000 00                        Oem Table ID : Template
0000000F 00000274 0000001E 0000002D 00000000 00                        Oem Revision : 00000001
00000010 000002AA 0000001B 0000002D 00000000 00                     Asl Compiler ID : INTL
00000011 000002DE 00000015 0000002D 00000000 00               Asl Compiler Revision : 20190108
00000013 00000316 00000018 0000002D 00000000 00                  Local Apic Address : 00000000
00000014 0000034C 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000015 00000382 00000017 0000002D 00000000 00                 PC-AT Compatibility : 1
00000017 000003B3 0000001D 0000002D 00000000 00                       Subtable Type : 00
00000018 000003FA 00000024 0000002D 00000000 00                              Length : 08
00000019 0000042A 0000001E 0000002D 00000000 00                        Processor ID : 00
0000001A 0000045A 0000001D 0000002D 00000000 00                       Local Apic ID : 00
0000001B 0000048A 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
0000001C 000004C0 00000019 0000002D 00000000 00                   Processor Enabled : 1
0000001D 000004EF 00000014 0000002D 00000000 00              Runtime Online Capable : 0
0000001F 00000520 0000001D 0000002D 00000000 00                       Subtable Type : 01
00000020 0000055B 00000024 0000002D 00000000 00                              Length : 0C
00000021 0000058B 0000001F 0000002D 00000000 00                         I/O Apic ID : 01
00000022 000005BB 00000022 0000002D 00000000 00                            Reserved : 00
00000023 000005EB 00000023 0000002D 00000000 00                             Address : 00000000
00000024 00000621 00000021 0000002D 00000000 00                           Interrupt : 00000000
00000026 00000659 0000001D 0000002D 00000000 00                       Subtable Type : 02
00000027 000006A5 00000024 0000002D 00000000 00                              Length : 0A
00000028 000006D5 00000027 0000002D 00000000 00                                 Bus : 00
00000029 00000705 00000024 0000002D 00000000 00                              Source : 00
0000002A 00000735 00000021 0000002D 00000000 00                           Interrupt : 00000000
0000002B 0000076B 00000015 0000002D 00000000 00               Flags (decoded below) : 0000
0000002C 0000079D 00000022 0000002D 00000000 00                            Polarity : 0
0000002D 000007CC 0000001E 0000002D 00000000 00                        Trigger Mode : 0
0000002F 000007FD 0000001D 0000002D 00000000 00                       Subtable Type : 03
00000030 0000083A 00000024 0000002D 00000000 00                              Length : 08
00000031 0000086A 00000015 0000002D 00000000 00               Flags (decoded below) : 000D
00000032 0000089C 00000022 0000002D 00000000 00                            Polarity : 1
00000033 000008CB 0000001E 0000002D 00000000 00                        Trigger Mode : 3
00000034 000008FA 00000021 0000002D 00000000 00                           Interrupt : 00000001
00000036 00000932 0000001D 0000002D 00000000 00                       Subtable Type : 04
00000037 00000973 00000024 0000002D 00000000 00                              Length : 06
00000038 000009A3 0000001E 0000002D 00000000 00                        Processor ID : 00
00000039 000009D3 00000015 0000002D 00000000 00               Flags (decoded below) : 0005
0000003A 00000A05 00000022 0000002D 00000000 00                            Polarity : 1
0000003B 00000A34 0000001E 0000002D 00000000 00                        Trigger Mode : 1
0000003C 00000A63 00000016 0000002D 00000000 00                Interrupt Input LINT : 01
0000003E 00000A95 0000001D 0000002D 00000000 00                       Subtable Type : 05
0000003F 00000AE3 00000024 0000002D 00000000 00                              Length : 0C
00000040 00000B13 00000022 0000002D 00000000 00                            Reserved : 0000
00000041 00000B45 0000001E 0000002D 00000000 00                        APIC Address : 0000000000000000
00000043 00000B85 0000001D 0000002D 00000000 00                       Subtable Type : 06
00000044 00000BC1 00000024 0000002D 00000000 00                              Length : 10
00000045 00000BF1 0000001E 0000002D 00000000 00                        I/O Sapic ID : 00
00000046 00000C21 00000022 0000002D 00000000 00                            Reserved : 00
00000047 00000C51 0000001C 0000002D 00000000 00                      Interrupt Base : 00000000
00000048 00000C87 00000023 0000002D 00000000 00                             Address : 0000000000000000
0000004A 00000CC7 0000001D 0000002D 00000000 00                       Subtable Type : 07
0000004B 00000D05 00000024 0000002D 00000000 00                              Length : 16
0000004C 00000D35 0000001E 0000002D 00000000 00                        Processor ID : 00
0000004D 00000D65 0000001C 0000002D 00000000 00                      Local Sapic ID : 00
0000004E 00000D95 0000001B 0000002D 00000000 00                     Local Sapic EID : 00
0000004F 00000DC5 00000022 0000002D 00000000 00                            Reserved : 000000
00000050 00000DF9 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000051 00000E2F 00000019 0000002D 00000000 00                   Processor Enabled : 1
00000052 00000E5E 0000001D 0000002D 00000000 00                       Processor UID : 00000000
00000053 00000E94 00000016 0000002D 00000000 00                Processor UID String : \CPU0
00000055 00000ECB 0000001D 0000002D 00000000 00                       Subtable Type : 08
00000056 00000F18 00000024 0000002D 00000000 00                              Length : 10
00000057 00000F48 00000015 0000002D 00000000 00               Flags (decoded below) : 0005
00000058 00000F7A 00000022 0000002D 00000000 00                            Polarity : 1
00000059 00000FA9 0000001E 0000002D 00000000 00                        Trigger Mode : 1
0000005A 00000FD8 0000001D 0000002D 00000000 00                       InterruptType : 00
0000005B 00001008 0000001E 0000002D 00000000 00                        Processor ID : 00
0000005C 00001038 0000001D 0000002D 00000000 00                       Processor EID : 00
0000005D 00001068 0000001A 0000002D 00000000 00                    I/O Sapic Vector : 00
0000005E 00001098 00000021 0000002D 00000000 00                           Interrupt : 00000001
0000005F 000010CE 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000060 00001104 0000001D 0000002D 00000000 00                       CPEI Override : 1
00000062 00001135 0000001D 0000002D 00000000 00                       Subtable Type : 09
00000063 0000117E 00000024 0000002D 00000000 00                              Length : 10
00000064 000011AE 00000022 0000002D 00000000 00                            Reserved : 0000
00000065 000011E0 00000017 0000002D 00000000 00                 Processor x2Apic ID : 00000000
00000066 00001216 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000067 0000124C 00000019 0000002D 00000000 00                   Processor Enabled : 1
00000068 0000127B 0000001D 0000002D 00000000 00                       Processor UID : 00000000
0000006A 000012B3 0000001D 0000002D 00000000 00                       Subtable Type : 0A
0000006B 000012F6 00000024 0000002D 00000000 00                              Length : 0C
0000006C 00001326 00000015 0000002D 00000000 00               Flags (decoded below) : 0005
0000006D 00001358 00000022 0000002D 00000000 00                            Polarity : 1
0000006E 00001387 0000001E 0000002D 00000000 00                        Trigger Mode : 1
0000006F 000013B6 0000001D 0000002D 00000000 00                       Processor UID : 00000000
00000070 000013EC 00000016 0000002D 00000000 00                Interrupt Input LINT : 00
00000071 0000141C 00000022 0000002D 00000000 00                            Reserved : 000000
00000073 00001452 0000001D 0000002D 00000000 00                       Subtable Type : 0B
00000074 000014A1 00000024 0000002D 00000000 00                              Length : 50
00000075 000014D1 00000022 0000002D 00000000 00                            Reserved : 0000
00000076 00001503 00000016 0000002D 00000000 00                CPU Interface Number : 00000000
00000077 00001539 0000001D 0000002D 00000000 00                       Processor UID : 00000000
00000078 0000156F 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000079 000015A5 00000019 0000002D 00000000 00                   Processor Enabled : 1
0000007A 000015D4 00000008 0000002D 00000000 00    Performance Interrupt Trigger Mode : 0
0000007B 00001603 00000008 0000002D 00000000 00    Virtual GIC Interrupt Trigger Mode : 0
0000007C 00001632 00000012 0000002D 00000000 00            Parking Protocol Version : 00000000
0000007D 00001668 00000015 0000002D 00000000 00               Performance Interrupt : 00000000
0000007E 0000169E 0000001C 0000002D 00000000 00                      Parked Address : 0000000000000000
0000007F 000016DC 0000001E 0000002D 00000000 00                        Base Address : 0000000000000000
00000080 0000171A 00000012 0000002D 00000000 00            Virtual GIC Base Address : 0000000000000000
00000081 00001758 0000000F 0000002D 00000000 00         Hypervisor GIC Base Address : 0000000000000000
00000082 00001796 00000015 0000002D 00000000 00               Virtual GIC Interrupt : 00000000
00000083 000017CC 00000010 0000002D 00000000 00          Redistributor Base Address : 0000000000000000
00000084 0000180A 00000021 0000002D 00000000 00                           ARM MPIDR : 0000000000000000
00000085 00001848 0000001A 0000002D 00000000 00                    Efficiency Class : 00
00000086 00001878 00000022 0000002D 00000000 00                            Reserved : 00
00000087 000018A8 00000014 0000002D 00000000 00              SPE Overflow Interrupt : 0000
00000089 000018DC 0000001D 0000002D 00000000 00                       Subtable Type : 0C
0000008A 0000192C 00000024 0000002D 00000000 00                              Length : 18
0000008B 0000195C 00000022 0000002D 00000000 00                            Reserved : 0000
0000008C 0000198E 00000015 0000002D 00000000 00               Local GIC Hardware ID : 00000000
0000008D 000019C4 0000001E 0000002D 00000000 00                        Base Address : 0000000000000000
0000008E 00001A02 0000001C 0000002D 00000000 00                      Interrupt Base : 00000000
0000008F 00001A38 00000023 0000002D 00000000 00                             Version : 01
00000090 00001A68 00000022 0000002D 00000000 00                            Reserved : 000000
00000092 00001A9E 0000001D 0000002D 00000000 00                       Subtable Type : 0D
00000093 00001AE2 00000024 0000002D 00000000 00                              Length : 18
00000094 00001B12 00000022 0000002D 00000000 00                            Reserved : 0000
00000095 00001B44 0000001E 0000002D 00000000 00                        MSI Frame ID : 00000000
00000096 00001B7A 0000001E 0000002D 00000000 00                        Base Address : 0000000000000000
00000097 00001BB8 00000015 0000002D 00000000 00               Flags (decoded below) : 00000001
00000098 00001BEE 00000020 0000002D 00000000 00                          Select SPI : 1
00000099 00001C1D 00000021 0000002D 00000000 00                           SPI Count : 0000
0000009A 00001C4F 00000022 0000002D 00000000 00                            SPI Base : 0000
0000009C 00001C83 0000001D 0000002D 00000000 00                       Subtable Type : 0E
0000009D 00001CD5 00000024 0000002D 00000000 00                              Length : 10
0000009E 00001D05 00000022 0000002D 00000000 00                            Reserved : 0000
0000009F 00001D37 0000001E 0000002D 00000000 00                        Base Address : 0000000000000000
000000A0 00001D75 00000024 0000002D 00000000 00                              Length : 00000000
000000A2 00001DAD 0000001D 0000002D 00000000 00                       Subtable Type : 0F
000000A3 00001DFC 00000024 0000002D 00000000 00                              Length : 14
000000A4 00001E2C 00000022 0000002D 00000000 00                            Reserved : 0000
000000A5 00001E5E 0000001C 0000002D 00000000 00                      Translation ID : 00000000
000000A6 00001E94 0000001E 0000002D 00000000 00                        Base Address : 0000000000000000
000000A7 00001ED2 00000022 0000002D 00000000 00                            Reserved : 00000000


Full Integer expression: 0000015A
**** Input expression: 0000015A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 346 (000000000000015A)
Full Integer expression: 05
**** Input expression: 05  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 5 (0000000000000005)
Full Integer expression: EF
**** Input expression: EF  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 239 (00000000000000EF)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 0C
**** Input expression: 0C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 02
**** Input expression: 02  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 2 (0000000000000002)
Full Integer expression: 0A
**** Input expression: 0A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 10 (000000000000000A)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 03
**** Input expression: 03  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 3 (0000000000000003)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 04
**** Input expression: 04  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 4 (0000000000000004)
Full Integer expression: 06
**** Input expression: 06  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 6 (0000000000000006)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 05
**** Input expression: 05  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 5 (0000000000000005)
Full Integer expression: 0C
**** Input expression: 0C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 06
**** Input expression: 06  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 6 (0000000000000006)
Full Integer expression: 10
**** Input expression: 10  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 07
**** Input expression: 07  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 7 (0000000000000007)
Full Integer expression: 16
**** Input expression: 16  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 22 (0000000000000016)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 08
**** Input expression: 08  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 8 (0000000000000008)
Full Integer expression: 10
**** Input expression: 10  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 09
**** Input expression: 09  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 9 (0000000000000009)
Full Integer expression: 10
**** Input expression: 10  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0A
**** Input expression: 0A  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 10 (000000000000000A)
Full Integer expression: 0C
**** Input expression: 0C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0B
**** Input expression: 0B  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 11 (000000000000000B)
Full Integer expression: 50
**** Input expression: 50  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 80 (0000000000000050)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00
**** Input expression: 00  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0C
**** Input expression: 0C  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 12 (000000000000000C)
Full Integer expression: 18
**** Input expression: 18  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 000000
**** Input expression: 000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0D
**** Input expression: 0D  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 13 (000000000000000D)
Full Integer expression: 18
**** Input expression: 18  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 24 (0000000000000018)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0E
**** Input expression: 0E  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 14 (000000000000000E)
Full Integer expression: 10
**** Input expression: 10  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0F
**** Input expression: 0F  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 15 (000000000000000F)
Full Integer expression: 14
**** Input expression: 14  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 20 (0000000000000014)
Full Integer expression: 0000
**** Input expression: 0000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 0000000000000000
**** Input expression: 0000000000000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)
Full Integer expression: 00000000
**** Input expression: 00000000  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 0 (0000000000000000)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

00000009 00000110 00000021 0000002D 00000000 00                           Signature : APIC
0000000A 00000170 0000001E 0000002D 00000004 00                        Table Length : 0000015A
0000000B 000001A6 00000022 0000002D 00000008 00                            Revision : 05
0000000C 000001D6 00000022 0000002D 00000009 00                            Checksum : EF
0000000D 00000206 00000024 0000002D 0000000A 00                              Oem ID : INTEL 
0000000E 0000023C 0000001E 0000002D 00000010 00                        Oem Table ID : Template
0000000F 00000274 0000001E 0000002D 00000018 00                        Oem Revision : 00000001
00000010 000002AA 0000001B 0000002D 0000001C 01                     Asl Compiler ID : INTL
00000011 000002DE 00000015 0000002D 00000020 01               Asl Compiler Revision : 20190703
00000013 00000316 00000018 0000002D 00000024 00                  Local Apic Address : 00000000
00000014 0000034C 00000015 0000002D 00000028 00               Flags (decoded below) : 00000001
00000015 00000382 00000017 0000002D 0000002C 00                 PC-AT Compatibility : 1
00000017 000003B3 0000001D 0000002D 0000002C 00                       Subtable Type : 00
00000018 000003FA 00000024 0000002D 0000002D 00                              Length : 08
00000019 0000042A 0000001E 0000002D 0000002E 00                        Processor ID : 00
0000001A 0000045A 0000001D 0000002D 0000002F 00                       Local Apic ID : 00
0000001B 0000048A 00000015 0000002D 00000030 00               Flags (decoded below) : 00000001
0000001C 000004C0 00000019 0000002D 00000034 00                   Processor Enabled : 1
0000001D 000004EF 00000014 0000002D 00000034 00              Runtime Online Capable : 0
0000001F 00000520 0000001D 0000002D 00000034 00                       Subtable Type : 01
00000020 0000055B 00000024 0000002D 00000035 00                              Length : 0C
00000021 0000058B 0000001F 0000002D 00000036 00                         I/O Apic ID : 01
00000022 000005BB 00000022 0000002D 00000037 00                            Reserved : 00
00000023 000005EB 00000023 0000002D 00000038 00                             Address : 00000000
00000024 00000621 00000021 0000002D 0000003C 00                           Interrupt : 00000000
00000026 00000659 0000001D 0000002D 00000040 00                       Subtable Type : 02
00000027 000006A5 00000024 0000002D 00000041 00                              Length : 0A
00000028 000006D5 00000027 0000002D 00000042 00                                 Bus : 00
00000029 00000705 00000024 0000002D 00000043 00                              Source : 00
0000002A 00000735 00000021 0000002D 00000044 00                           Interrupt : 00000000
0000002B 0000076B 00000015 0000002D 00000048 00               Flags (decoded below) : 0000
0000002C 0000079D 00000022 0000002D 0000004A 00                            Polarity : 0
0000002D 000007CC 0000001E 0000002D 0000004A 00                        Trigger Mode : 0
0000002F 000007FD 0000001D 0000002D 0000004A 00                       Subtable Type : 03
00000030 0000083A 00000024 0000002D 0000004B 00                              Length : 08
00000031 0000086A 00000015 0000002D 0000004C 00               Flags (decoded below) : 000D
00000032 0000089C 00000022 0000002D 0000004E 00                            Polarity : 1
00000033 000008CB 0000001E 0000002D 0000004E 00                        Trigger Mode : 3
00000034 000008FA 00000021 0000002D 0000004E 00                           Interrupt : 00000001
00000036 00000932 0000001D 0000002D 00000052 00                       Subtable Type : 04
00000037 00000973 00000024 0000002D 00000053 00                              Length : 06
00000038 000009A3 0000001E 0000002D 00000054 00                        Processor ID : 00
00000039 000009D3 00000015 0000002D 00000055 00               Flags (decoded below) : 0005
0000003A 00000A05 00000022 0000002D 00000057 00                            Polarity : 1
0000003B 00000A34 0000001E 0000002D 00000057 00                        Trigger Mode : 1
0000003C 00000A63 00000016 0000002D 00000057 00                Interrupt Input LINT : 01
0000003E 00000A95 0000001D 0000002D 00000058 00                       Subtable Type : 05
0000003F 00000AE3 00000024 0000002D 00000059 00                              Length : 0C
00000040 00000B13 00000022 0000002D 0000005A 00                            Reserved : 0000
00000041 00000B45 0000001E 0000002D 0000005C 00                        APIC Address : 0000000000000000
00000043 00000B85 0000001D 0000002D 00000064 00                       Subtable Type : 06
00000044 00000BC1 00000024 0000002D 00000065 00                              Length : 10
00000045 00000BF1 0000001E 0000002D 00000066 00                        I/O Sapic ID : 00
00000046 00000C21 00000022 0000002D 00000067 00                            Reserved : 00
00000047 00000C51 0000001C 0000002D 00000068 00                      Interrupt Base : 00000000
00000048 00000C87 00000023 0000002D 0000006C 00                             Address : 0000000000000000
0000004A 00000CC7 0000001D 0000002D 00000074 00                       Subtable Type : 07
0000004B 00000D05 00000024 0000002D 00000075 00                              Length : 16
0000004C 00000D35 0000001E 0000002D 00000076 00                        Processor ID : 00
0000004D 00000D65 0000001C 0000002D 00000077 00                      Local Sapic ID : 00
0000004E 00000D95 0000001B 0000002D 00000078 00                     Local Sapic EID : 00
0000004F 00000DC5 00000022 0000002D 00000079 00                            Reserved : 000000
00000050 00000DF9 00000015 0000002D 0000007C 00               Flags (decoded below) : 00000001
00000051 00000E2F 00000019 0000002D 00000080 00                   Processor Enabled : 1
00000052 00000E5E 0000001D 0000002D 00000080 00                       Processor UID : 00000000
00000053 00000E94 00000016 0000002D 00000084 00                Processor UID String : \CPU0
00000055 00000ECB 0000001D 0000002D 0000008A 00                       Subtable Type : 08
00000056 00000F18 00000024 0000002D 0000008B 00                              Length : 10
00000057 00000F48 00000015 0000002D 0000008C 00               Flags (decoded below) : 0005
00000058 00000F7A 00000022 0000002D 0000008E 00                            Polarity : 1
00000059 00000FA9 0000001E 0000002D 0000008E 00                        Trigger Mode : 1
0000005A 00000FD8 0000001D 0000002D 0000008E 00                       InterruptType : 00
0000005B 00001008 0000001E 0000002D 0000008F 00                        Processor ID : 00
0000005C 00001038 0000001D 0000002D 00000090 00                       Processor EID : 00
0000005D 00001068 0000001A 0000002D 00000091 00                    I/O Sapic Vector : 00
0000005E 00001098 00000021 0000002D 00000092 00                           Interrupt : 00000001
0000005F 000010CE 00000015 0000002D 00000096 00               Flags (decoded below) : 00000001
00000060 00001104 0000001D 0000002D 0000009A 00                       CPEI Override : 1
00000062 00001135 0000001D 0000002D 0000009A 00                       Subtable Type : 09
00000063 0000117E 00000024 0000002D 0000009B 00                              Length : 10
00000064 000011AE 00000022 0000002D 0000009C 00                            Reserved : 0000
00000065 000011E0 00000017 0000002D 0000009E 00                 Processor x2Apic ID : 00000000
00000066 00001216 00000015 0000002D 000000A2 00               Flags (decoded below) : 00000001
00000067 0000124C 00000019 0000002D 000000A6 00                   Processor Enabled : 1
00000068 0000127B 0000001D 0000002D 000000A6 00                       Processor UID : 00000000
0000006A 000012B3 0000001D 0000002D 000000AA 00                       Subtable Type : 0A
0000006B 000012F6 00000024 0000002D 000000AB 00                              Length : 0C
0000006C 00001326 00000015 0000002D 000000AC 00               Flags (decoded below) : 0005
0000006D 00001358 00000022 0000002D 000000AE 00                            Polarity : 1
0000006E 00001387 0000001E 0000002D 000000AE 00                        Trigger Mode : 1
0000006F 000013B6 0000001D 0000002D 000000AE 00                       Processor UID : 00000000
00000070 000013EC 00000016 0000002D 000000B2 00                Interrupt Input LINT : 00
00000071 0000141C 00000022 0000002D 000000B3 00                            Reserved : 000000
00000073 00001452 0000001D 0000002D 000000B6 00                       Subtable Type : 0B
00000074 000014A1 00000024 0000002D 000000B7 00                              Length : 50
00000075 000014D1 00000022 0000002D 000000B8 00                            Reserved : 0000
00000076 00001503 00000016 0000002D 000000BA 00                CPU Interface Number : 00000000
00000077 00001539 0000001D 0000002D 000000BE 00                       Processor UID : 00000000
00000078 0000156F 00000015 0000002D 000000C2 00               Flags (decoded below) : 00000001
00000079 000015A5 00000019 0000002D 000000C6 00                   Processor Enabled : 1
0000007A 000015D4 00000008 0000002D 000000C6 00    Performance Interrupt Trigger Mode : 0
0000007B 00001603 00000008 0000002D 000000C6 00    Virtual GIC Interrupt Trigger Mode : 0
0000007C 00001632 00000012 0000002D 000000C6 00            Parking Protocol Version : 00000000
0000007D 00001668 00000015 0000002D 000000CA 00               Performance Interrupt : 00000000
0000007E 0000169E 0000001C 0000002D 000000CE 00                      Parked Address : 0000000000000000
0000007F 000016DC 0000001E 0000002D 000000D6 00                        Base Address : 0000000000000000
00000080 0000171A 00000012 0000002D 000000DE 00            Virtual GIC Base Address : 0000000000000000
00000081 00001758 0000000F 0000002D 000000E6 00         Hypervisor GIC Base Address : 0000000000000000
00000082 00001796 00000015 0000002D 000000EE 00               Virtual GIC Interrupt : 00000000
00000083 000017CC 00000010 0000002D 000000F2 00          Redistributor Base Address : 0000000000000000
00000084 0000180A 00000021 0000002D 000000FA 00                           ARM MPIDR : 0000000000000000
00000085 00001848 0000001A 0000002D 00000102 00                    Efficiency Class : 00
00000086 00001878 00000022 0000002D 00000103 00                            Reserved : 00
00000087 000018A8 00000014 0000002D 00000104 00              SPE Overflow Interrupt : 0000
00000089 000018DC 0000001D 0000002D 00000106 00                       Subtable Type : 0C
0000008A 0000192C 00000024 0000002D 00000107 00                              Length : 18
0000008B 0000195C 00000022 0000002D 00000108 00                            Reserved : 0000
0000008C 0000198E 00000015 0000002D 0000010A 00               Local GIC Hardware ID : 00000000
0000008D 000019C4 0000001E 0000002D 0000010E 00                        Base Address : 0000000000000000
0000008E 00001A02 0000001C 0000002D 00000116 00                      Interrupt Base : 00000000
0000008F 00001A38 00000023 0000002D 0000011A 00                             Version : 01
00000090 00001A68 00000022 0000002D 0000011B 00                            Reserved : 000000
00000092 00001A9E 0000001D 0000002D 0000011E 00                       Subtable Type : 0D
00000093 00001AE2 00000024 0000002D 0000011F 00                              Length : 18
00000094 00001B12 00000022 0000002D 00000120 00                            Reserved : 0000
00000095 00001B44 0000001E 0000002D 00000122 00                        MSI Frame ID : 00000000
00000096 00001B7A 0000001E 0000002D 00000126 00                        Base Address : 0000000000000000
00000097 00001BB8 00000015 0000002D 0000012E 00               Flags (decoded below) : 00000001
00000098 00001BEE 00000020 0000002D 00000132 00                          Select SPI : 1
00000099 00001C1D 00000021 0000002D 00000132 00                           SPI Count : 0000
0000009A 00001C4F 00000022 0000002D 00000134 00                            SPI Base : 0000
0000009C 00001C83 0000001D 0000002D 00000136 00                       Subtable Type : 0E
0000009D 00001CD5 00000024 0000002D 00000137 00                              Length : 10
0000009E 00001D05 00000022 0000002D 00000138 00                            Reserved : 0000
0000009F 00001D37 0000001E 0000002D 0000013A 00                        Base Address : 0000000000000000
000000A0 00001D75 00000024 0000002D 00000142 00                              Length : 00000000
000000A2 00001DAD 0000001D 0000002D 00000146 00                       Subtable Type : 0F
000000A3 00001DFC 00000024 0000002D 00000147 00                              Length : 14
000000A4 00001E2C 00000022 0000002D 00000148 00                            Reserved : 0000
000000A5 00001E5E 0000001C 0000002D 0000014A 00                      Translation ID : 00000000
000000A6 00001E94 0000001E 0000002D 0000014E 00                        Base Address : 0000000000000000
000000A7 00001ED2 00000022 0000002D 00000156 00                            Reserved : 00000000


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 0000015A 00000004 00000000 03016F0C 00000000 03016F38 00000000
[0001]       Local Apic Address 00000008 00000008 00000000 00000000 03016F38 03016F0C 00000000 03016F64
[0001]            Subtable Type 00000002 00000008 00000001 00000000 03016F64 03016F0C 03016F90 03016FBC
[0002]             Processor ID 00000006 00000006 00000000 00000000 03016F90 03016F64 00000000 00000000
[0001]            Subtable Type 00000002 0000000C 00000001 00000000 03016FBC 03016F0C 03016FE8 03017014
[0002]              I/O Apic ID 0000000A 0000000A 00000000 00000000 03016FE8 03016FBC 00000000 00000000
[0001]            Subtable Type 00000002 0000000A 00000001 00000000 03017014 03016F0C 03017040 0301706C
[0002]                      Bus 00000008 00000008 00000000 00000000 03017040 03017014 00000000 00000000
[0001]            Subtable Type 00000002 00000008 00000001 00000000 0301706C 03016F0C 03017098 030170C4
[0002]    Flags (decoded below) 00000006 00000006 00000000 00000000 03017098 0301706C 00000000 00000000
[0001]            Subtable Type 00000002 00000006 00000001 00000000 030170C4 03016F0C 030170F0 0301711C
[0002]             Processor ID 00000004 00000004 00000000 00000000 030170F0 030170C4 00000000 00000000
[0001]            Subtable Type 00000002 0000000C 00000001 00000000 0301711C 03016F0C 03017148 03017174
[0002]                 Reserved 0000000A 0000000A 00000000 00000000 03017148 0301711C 00000000 00000000
[0001]            Subtable Type 00000002 00000010 00000001 00000000 03017174 03016F0C 030171A0 030171CC
[0002]             I/O Sapic ID 0000000E 0000000E 00000000 00000000 030171A0 03017174 00000000 00000000
[0001]            Subtable Type 00000002 00000016 00000001 00000000 030171CC 03016F0C 030171F8 03017224
[0002]             Processor ID 00000014 00000014 00000000 00000000 030171F8 030171CC 00000000 00000000
[0001]            Subtable Type 00000002 00000010 00000001 00000000 03017224 03016F0C 03017250 0301727C
[0002]    Flags (decoded below) 0000000E 0000000E 00000000 00000000 03017250 03017224 00000000 00000000
[0001]            Subtable Type 00000002 00000010 00000001 00000000 0301727C 03016F0C 030172A8 030172D4
[0002]                 Reserved 0000000E 0000000E 00000000 00000000 030172A8 0301727C 00000000 00000000
[0001]            Subtable Type 00000002 0000000C 00000001 00000000 030172D4 03016F0C 03017300 0301732C
[0002]    Flags (decoded below) 0000000A 0000000A 00000000 00000000 03017300 030172D4 00000000 00000000
[0001]            Subtable Type 00000002 00000050 00000001 00000000 0301732C 03016F0C 03017358 03017384
[0002]                 Reserved 0000004E 0000004E 00000000 00000000 03017358 0301732C 00000000 00000000
[0001]            Subtable Type 00000002 00000018 00000001 00000000 03017384 03016F0C 030173B0 030173DC
[0002]                 Reserved 00000016 00000016 00000000 00000000 030173B0 03017384 00000000 00000000
[0001]            Subtable Type 00000002 00000018 00000001 00000000 030173DC 03016F0C 03017408 03017434
[0002]                 Reserved 00000016 00000016 00000000 00000000 03017408 030173DC 00000000 00000000
[0001]            Subtable Type 00000002 00000010 00000001 00000000 03017434 03016F0C 03017460 0301748C
[0002]                 Reserved 0000000E 0000000E 00000000 00000000 03017460 03017434 00000000 00000000
[0001]            Subtable Type 00000002 00000014 00000001 00000000 0301748C 03016F0C 030174B8 00000000
[0002]                 Reserved 00000012 00000012 00000000 00000000 030174B8 0301748C 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  03016F0C (24) - (15A)
[0001]       Local Apic Address     03016F38 (08) - (08)
[0001]            Subtable Type     03016F64 (02) - (08)
[0002]             Processor ID         03016F90 (06) - (06)
[0001]            Subtable Type     03016FBC (02) - (0C)
[0002]              I/O Apic ID         03016FE8 (0A) - (0A)
[0001]            Subtable Type     03017014 (02) - (0A)
[0002]                      Bus         03017040 (08) - (08)
[0001]            Subtable Type     0301706C (02) - (08)
[0002]    Flags (decoded below)         03017098 (06) - (06)
[0001]            Subtable Type     030170C4 (02) - (06)
[0002]             Processor ID         030170F0 (04) - (04)
[0001]            Subtable Type     0301711C (02) - (0C)
[0002]                 Reserved         03017148 (0A) - (0A)
[0001]            Subtable Type     03017174 (02) - (10)
[0002]             I/O Sapic ID         030171A0 (0E) - (0E)
[0001]            Subtable Type     030171CC (02) - (16)
[0002]             Processor ID         030171F8 (14) - (14)
[0001]            Subtable Type     03017224 (02) - (10)
[0002]    Flags (decoded below)         03017250 (0E) - (0E)
[0001]            Subtable Type     0301727C (02) - (10)
[0002]                 Reserved         030172A8 (0E) - (0E)
[0001]            Subtable Type     030172D4 (02) - (0C)
[0002]    Flags (decoded below)         03017300 (0A) - (0A)
[0001]            Subtable Type     0301732C (02) - (50)
[0002]                 Reserved         03017358 (4E) - (4E)
[0001]            Subtable Type     03017384 (02) - (18)
[0002]                 Reserved         030173B0 (16) - (16)
[0001]            Subtable Type     030173DC (02) - (18)
[0002]                 Reserved         03017408 (16) - (16)
[0001]            Subtable Type     03017434 (02) - (10)
[0002]                 Reserved         03017460 (0E) - (0E)
[0001]            Subtable Type     0301748C (02) - (14)
[0002]                 Reserved         030174B8 (12) - (12)

