
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "xsdt.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0038) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : XSDT
0000000B 00000188 00000021 00000030 00000000 00                        Table Length : 00000064
0000000C 000001C1 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001F4 00000025 00000030 00000000 00                            Checksum : 8B
0000000E 00000227 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000260 00000021 00000030 00000000 00                        Oem Table ID : TEMPLATE
00000010 0000029B 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002D4 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 0000030B 00000018 00000030 00000000 00               Asl Compiler Revision : 20100528
00000014 00000346 00000017 00000030 00000000 00              ACPI Table Address   0 : 0000000000000010
00000015 00000387 00000017 00000030 00000000 00              ACPI Table Address   1 : 0000000000000020
00000016 000003C8 00000017 00000030 00000000 00              ACPI Table Address   2 : 0000000000000030
00000017 00000409 00000017 00000030 00000000 00              ACPI Table Address   3 : 0000000000000040
00000018 0000044A 00000017 00000030 00000000 00              ACPI Table Address   4 : 0000000000000050
00000019 0000048B 00000017 00000030 00000000 00              ACPI Table Address   5 : 0000000000000060
0000001A 000004CC 00000017 00000030 00000000 00              ACPI Table Address   6 : 0000000000000070
0000001B 0000050D 00000017 00000030 00000000 00              ACPI Table Address   7 : 0000000000000080


Full Integer expression: 00000064
**** Input expression: 00000064  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 100 (0000000000000064)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 8B
**** Input expression: 8B  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 139 (000000000000008B)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)
Full Integer expression: 0000000000000010
**** Input expression: 0000000000000010  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 16 (0000000000000010)
Full Integer expression: 0000000000000020
**** Input expression: 0000000000000020  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 32 (0000000000000020)
Full Integer expression: 0000000000000030
**** Input expression: 0000000000000030  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 48 (0000000000000030)
Full Integer expression: 0000000000000040
**** Input expression: 0000000000000040  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 64 (0000000000000040)
Full Integer expression: 0000000000000050
**** Input expression: 0000000000000050  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 80 (0000000000000050)
Full Integer expression: 0000000000000060
**** Input expression: 0000000000000060  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 96 (0000000000000060)
Full Integer expression: 0000000000000070
**** Input expression: 0000000000000070  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 112 (0000000000000070)
Full Integer expression: 0000000000000080
**** Input expression: 0000000000000080  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 128 (0000000000000080)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 0000267E 00                           Signature : XSDT
0000000B 00000188 00000021 00000030 00002682 00                        Table Length : 00000064
0000000C 000001C1 00000025 00000030 00002686 00                            Revision : 01
0000000D 000001F4 00000025 00000030 00002687 00                            Checksum : 8B
0000000E 00000227 00000027 00000030 00002688 00                              Oem ID : INTEL 
0000000F 00000260 00000021 00000030 0000268E 00                        Oem Table ID : TEMPLATE
00000010 0000029B 00000021 00000030 00002696 00                        Oem Revision : 00000001
00000011 000002D4 0000001E 00000030 0000269A 01                     Asl Compiler ID : INTL
00000012 0000030B 00000018 00000030 0000269E 01               Asl Compiler Revision : 20190703
00000014 00000346 00000017 00000030 00000000 00              ACPI Table Address   0 : 0000000000000010
00000015 00000387 00000017 00000030 00000000 00              ACPI Table Address   1 : 0000000000000020
00000016 000003C8 00000017 00000030 00000000 00              ACPI Table Address   2 : 0000000000000030
00000017 00000409 00000017 00000030 00000000 00              ACPI Table Address   3 : 0000000000000040
00000018 0000044A 00000017 00000030 00000000 00              ACPI Table Address   4 : 0000000000000050
00000019 0000048B 00000017 00000030 00000000 00              ACPI Table Address   5 : 0000000000000060
0000001A 000004CC 00000017 00000030 00000000 00              ACPI Table Address   6 : 0000000000000070
0000001B 0000050D 00000017 00000030 00000000 00              ACPI Table Address   7 : 0000000000000080


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000064 00000004 00000000 030C7360 00000000 030C738C 00000000
[0001]                   (null) 00000008 00000008 00000000 00000000 030C738C 030C7360 00000000 030C73B8
[0001]                   (null) 00000008 00000008 00000000 00000000 030C73B8 030C7360 00000000 030C73E4
[0001]                   (null) 00000008 00000008 00000000 00000000 030C73E4 030C7360 00000000 030C7410
[0001]                   (null) 00000008 00000008 00000000 00000000 030C7410 030C7360 00000000 030C743C
[0001]                   (null) 00000008 00000008 00000000 00000000 030C743C 030C7360 00000000 030C7468
[0001]                   (null) 00000008 00000008 00000000 00000000 030C7468 030C7360 00000000 030C7494
[0001]                   (null) 00000008 00000008 00000000 00000000 030C7494 030C7360 00000000 030C74C0
[0001]                   (null) 00000008 00000008 00000000 00000000 030C74C0 030C7360 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030C7360 (24) - (64)
[0001]                   (null)     030C738C (08) - (08)
[0001]                   (null)     030C73B8 (08) - (08)
[0001]                   (null)     030C73E4 (08) - (08)
[0001]                   (null)     030C7410 (08) - (08)
[0001]                   (null)     030C743C (08) - (08)
[0001]                   (null)     030C7468 (08) - (08)
[0001]                   (null)     030C7494 (08) - (08)
[0001]                   (null)     030C74C0 (08) - (08)



Elapsed time for major events

     261 usec        0 msec - Preprocess input file
     379 usec        0 msec - Scan and parse input file
     535 usec        1 msec - Compile parse tree
6863 Strings (88616 bytes), Buffer size: 65536 bytes, 2 Buffers
48 ParseOps, Buffer size: 16384 ops (3407872 bytes), 1 Buffers
2814 Fields, Buffer size: 512 fields (22528 bytes), 6 Buffers
538 Subtables, Buffer size: 128 subtables (5632 bytes), 5 Buffers
