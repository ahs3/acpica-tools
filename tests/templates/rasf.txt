
Intel ACPI Component Architecture
ASL+ Optimizing Compiler/Disassembler version 20190703 (32-bit version)
Copyright (c) 2000 - 2019 Intel Corporation

Compilation of "rasf.asl" - Fri Aug  2 08:55:58 2019

Starting preprocessing phase


Pr(0027) - Pop InputFile Stack, Fnode 00000000

Preprocessing phase complete 


Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00000000 00                           Signature : RASF
0000000B 00000179 00000021 00000030 00000000 00                        Table Length : 00000030
0000000C 000001B2 00000025 00000030 00000000 00                            Revision : 01
0000000D 000001E5 00000025 00000030 00000000 00                            Checksum : 31
0000000E 00000218 00000027 00000030 00000000 00                              Oem ID : INTEL 
0000000F 00000251 00000021 00000030 00000000 00                        Oem Table ID : Template
00000010 0000028C 00000021 00000030 00000000 00                        Oem Revision : 00000001
00000011 000002C5 0000001E 00000030 00000000 00                     Asl Compiler ID : INTL
00000012 000002FC 00000018 00000030 00000000 00               Asl Compiler Revision : 20160527
00000014 00000337 00000023 00000030 00000000 00                          Channel ID : 00 00 00 00 00 00 00 00 00 00 00 00


Full Integer expression: 00000030
**** Input expression: 00000030  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 48 (0000000000000030)
Full Integer expression: 01
**** Input expression: 01  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 31
**** Input expression: 31  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 49 (0000000000000031)
Full Integer expression: 00000001
**** Input expression: 00000001  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 1 (0000000000000001)
Full Integer expression: 20190703
**** Input expression: 20190703  (Base 16)
Starting parse
Entering state 0
Reading a token: Next token is token OP_EXP_NUMBER ()
Shifting token OP_EXP_NUMBER ()
Entering state 1
Reducing stack by rule 25 (line 286):
   $1 = token OP_EXP_NUMBER ()
-> $$ = nterm Expression ()
Stack now 0
Entering state 9
Reading a token: Next token is token OP_EXP_EOF ()
Shifting token OP_EXP_EOF ()
Entering state 14
Reducing stack by rule 2 (line 237):
   $1 = nterm Expression ()
   $2 = token OP_EXP_EOF ()
**** Parser returned value: 538511107 (0000000020190703)

Field List:
LineNo   ByteOff  NameCol  Column   TableOff Flags                             Name : Value

0000000A 0000012A 00000024 00000030 00001DF7 00                           Signature : RASF
0000000B 00000179 00000021 00000030 00001DFB 00                        Table Length : 00000030
0000000C 000001B2 00000025 00000030 00001DFF 00                            Revision : 01
0000000D 000001E5 00000025 00000030 00001E00 00                            Checksum : 31
0000000E 00000218 00000027 00000030 00001E01 00                              Oem ID : INTEL 
0000000F 00000251 00000021 00000030 00001E07 00                        Oem Table ID : Template
00000010 0000028C 00000021 00000030 00001E0F 00                        Oem Revision : 00000001
00000011 000002C5 0000001E 00000030 00001E13 01                     Asl Compiler ID : INTL
00000012 000002FC 00000018 00000030 00001E17 01               Asl Compiler Revision : 20190703
00000014 00000337 00000023 00000030 00001E1B 00                          Channel ID : 00 00 00 00 00 00 00 00 00 00 00 00


Subtable Info:
Depth                      Name Length   TotalLen LenSize  Flags    This     Parent   Child    Peer

[0000]                Signature 00000024 00000030 00000004 00000000 030942D8 00000000 03094304 00000000
[0001]               Channel ID 0000000C 0000000C 00000000 00000000 03094304 030942D8 00000000 00000000

Subtable Tree: (Depth, Name, Subtable, Length, TotalLength)

[0000]                Signature  030942D8 (24) - (30)
[0001]               Channel ID     03094304 (0C) - (0C)

